/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export interface MockKlerosLiquidInterface extends utils.Interface {
  functions: {
    'MIN_JURORS()': FunctionFragment;
    'NON_PAYABLE_AMOUNT()': FunctionFragment;
    '__setCurrentRuling(uint256,uint256)': FunctionFragment;
    '__setSubcourtTimesPerPeriod(uint96,uint256[4])': FunctionFragment;
    'appeal(uint256,bytes)': FunctionFragment;
    'appealCost(uint256,bytes)': FunctionFragment;
    'appealPeriod(uint256)': FunctionFragment;
    'arbitrationCost(bytes)': FunctionFragment;
    'courts(uint256)': FunctionFragment;
    'createDispute(uint256,bytes)': FunctionFragment;
    'currentRuling(uint256)': FunctionFragment;
    'disputeStatus(uint256)': FunctionFragment;
    'disputes(uint256)': FunctionFragment;
    'executeRuling(uint256)': FunctionFragment;
    'getSubcourt(uint96)': FunctionFragment;
    'passPeriod(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MIN_JURORS'
      | 'NON_PAYABLE_AMOUNT'
      | '__setCurrentRuling'
      | '__setSubcourtTimesPerPeriod'
      | 'appeal'
      | 'appealCost'
      | 'appealPeriod'
      | 'arbitrationCost'
      | 'courts'
      | 'createDispute'
      | 'currentRuling'
      | 'disputeStatus'
      | 'disputes'
      | 'executeRuling'
      | 'getSubcourt'
      | 'passPeriod'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MIN_JURORS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NON_PAYABLE_AMOUNT', values?: undefined): string;
  encodeFunctionData(
    functionFragment: '__setCurrentRuling',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: '__setSubcourtTimesPerPeriod',
    values: [
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'appeal',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'appealCost',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'appealPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'arbitrationCost', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'courts', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'createDispute',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: 'currentRuling', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'disputeStatus', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'disputes', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'executeRuling', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getSubcourt', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'passPeriod', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'MIN_JURORS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NON_PAYABLE_AMOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '__setCurrentRuling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '__setSubcourtTimesPerPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appeal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appealCost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appealPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'arbitrationCost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'courts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createDispute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentRuling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disputeStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disputes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeRuling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSubcourt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'passPeriod', data: BytesLike): Result;

  events: {};
}

export interface MockKlerosLiquid extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockKlerosLiquidInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_JURORS(overrides?: CallOverrides): Promise<[BigNumber]>;

    NON_PAYABLE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    __setCurrentRuling(
      disputeId: PromiseOrValue<BigNumberish>,
      ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __setSubcourtTimesPerPeriod(
      _subcourtID: PromiseOrValue<BigNumberish>,
      _timesPerPeriod: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    appeal(
      _disputeID: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    appealCost(
      _disputeID: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cost: BigNumber }>;

    appealPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    arbitrationCost(
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cost: BigNumber }>;

    courts(
      subcourtId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        parent: BigNumber;
        hiddenVotes: boolean;
        minStake: BigNumber;
        alpha: BigNumber;
        feeForJuror: BigNumber;
        jurorsForCourtJump: BigNumber;
      }
    >;

    createDispute(
      _numberOfChoices: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentRuling(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    disputeStatus(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { status: number }>;

    disputes(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, number, BigNumber, BigNumber, BigNumber, boolean] & {
        subcourtID: BigNumber;
        arbitrated: string;
        numberOfChoices: BigNumber;
        period: number;
        lastPeriodChange: BigNumber;
        drawsInRound: BigNumber;
        commitsInRound: BigNumber;
        ruled: boolean;
      }
    >;

    executeRuling(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSubcourt(
      _subcourtID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], [BigNumber, BigNumber, BigNumber, BigNumber]] & {
        children: BigNumber[];
        timesPerPeriod: [BigNumber, BigNumber, BigNumber, BigNumber];
      }
    >;

    passPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_JURORS(overrides?: CallOverrides): Promise<BigNumber>;

  NON_PAYABLE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  __setCurrentRuling(
    disputeId: PromiseOrValue<BigNumberish>,
    ruling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __setSubcourtTimesPerPeriod(
    _subcourtID: PromiseOrValue<BigNumberish>,
    _timesPerPeriod: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  appeal(
    _disputeID: PromiseOrValue<BigNumberish>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  appealCost(
    _disputeID: PromiseOrValue<BigNumberish>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  appealPeriod(
    _disputeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

  arbitrationCost(_extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  courts(
    subcourtId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      parent: BigNumber;
      hiddenVotes: boolean;
      minStake: BigNumber;
      alpha: BigNumber;
      feeForJuror: BigNumber;
      jurorsForCourtJump: BigNumber;
    }
  >;

  createDispute(
    _numberOfChoices: PromiseOrValue<BigNumberish>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentRuling(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  disputeStatus(_disputeID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  disputes(
    disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, number, BigNumber, BigNumber, BigNumber, boolean] & {
      subcourtID: BigNumber;
      arbitrated: string;
      numberOfChoices: BigNumber;
      period: number;
      lastPeriodChange: BigNumber;
      drawsInRound: BigNumber;
      commitsInRound: BigNumber;
      ruled: boolean;
    }
  >;

  executeRuling(
    _disputeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSubcourt(
    _subcourtID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], [BigNumber, BigNumber, BigNumber, BigNumber]] & {
      children: BigNumber[];
      timesPerPeriod: [BigNumber, BigNumber, BigNumber, BigNumber];
    }
  >;

  passPeriod(
    _disputeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_JURORS(overrides?: CallOverrides): Promise<BigNumber>;

    NON_PAYABLE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    __setCurrentRuling(
      disputeId: PromiseOrValue<BigNumberish>,
      ruling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    __setSubcourtTimesPerPeriod(
      _subcourtID: PromiseOrValue<BigNumberish>,
      _timesPerPeriod: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    appeal(
      _disputeID: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    appealCost(
      _disputeID: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appealPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    arbitrationCost(_extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    courts(
      subcourtId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        parent: BigNumber;
        hiddenVotes: boolean;
        minStake: BigNumber;
        alpha: BigNumber;
        feeForJuror: BigNumber;
        jurorsForCourtJump: BigNumber;
      }
    >;

    createDispute(
      _numberOfChoices: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRuling(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    disputeStatus(_disputeID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

    disputes(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, number, BigNumber, BigNumber, BigNumber, boolean] & {
        subcourtID: BigNumber;
        arbitrated: string;
        numberOfChoices: BigNumber;
        period: number;
        lastPeriodChange: BigNumber;
        drawsInRound: BigNumber;
        commitsInRound: BigNumber;
        ruled: boolean;
      }
    >;

    executeRuling(_disputeID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getSubcourt(
      _subcourtID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], [BigNumber, BigNumber, BigNumber, BigNumber]] & {
        children: BigNumber[];
        timesPerPeriod: [BigNumber, BigNumber, BigNumber, BigNumber];
      }
    >;

    passPeriod(_disputeID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    MIN_JURORS(overrides?: CallOverrides): Promise<BigNumber>;

    NON_PAYABLE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    __setCurrentRuling(
      disputeId: PromiseOrValue<BigNumberish>,
      ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __setSubcourtTimesPerPeriod(
      _subcourtID: PromiseOrValue<BigNumberish>,
      _timesPerPeriod: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    appeal(
      _disputeID: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    appealCost(
      _disputeID: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appealPeriod(_disputeID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    arbitrationCost(_extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    courts(subcourtId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    createDispute(
      _numberOfChoices: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentRuling(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    disputeStatus(_disputeID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    disputes(disputeId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    executeRuling(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSubcourt(_subcourtID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    passPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_JURORS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NON_PAYABLE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __setCurrentRuling(
      disputeId: PromiseOrValue<BigNumberish>,
      ruling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __setSubcourtTimesPerPeriod(
      _subcourtID: PromiseOrValue<BigNumberish>,
      _timesPerPeriod: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    appeal(
      _disputeID: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    appealCost(
      _disputeID: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appealPeriod(_disputeID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitrationCost(_extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    courts(subcourtId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createDispute(
      _numberOfChoices: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentRuling(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputeStatus(_disputeID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputes(disputeId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeRuling(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSubcourt(_subcourtID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    passPeriod(
      _disputeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

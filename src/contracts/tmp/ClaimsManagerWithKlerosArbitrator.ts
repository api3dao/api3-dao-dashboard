/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface ClaimsManagerWithKlerosArbitratorInterface extends utils.Interface {
  functions: {
    'acceptClaim(uint256)': FunctionFragment;
    'acceptSettlement(uint256)': FunctionFragment;
    'accessControlRegistry()': FunctionFragment;
    'accountToAccumulatedQuotaUsageCheckpoints(address,uint256)': FunctionFragment;
    'accountToQuota(address)': FunctionFragment;
    'adminRole()': FunctionFragment;
    'adminRoleDescription()': FunctionFragment;
    'api3Pool()': FunctionFragment;
    'appealKlerosArbitratorDecision(uint256,uint256)': FunctionFragment;
    'arbitrationParamsChanges(uint256)': FunctionFragment;
    'arbitrationParamsCount()': FunctionFragment;
    'arbitratorRole()': FunctionFragment;
    'arbitratorToResponsePeriod(address)': FunctionFragment;
    'changeArbitrationParams(address,bytes,string,uint256)': FunctionFragment;
    'claimCount()': FunctionFragment;
    'claimIndexToArbitrationParamIndex(uint256)': FunctionFragment;
    'claimIndexToArbitrator(uint256)': FunctionFragment;
    'claimIndexToProposedSettlementAmount(uint256)': FunctionFragment;
    'claimantResponsePeriod()': FunctionFragment;
    'claims(uint256)': FunctionFragment;
    'createClaim(address,uint256,uint256,uint256,string,uint256,string)': FunctionFragment;
    'createDispute(uint256,address)': FunctionFragment;
    'createDisputeWithKlerosArbitrator(uint256)': FunctionFragment;
    'createPolicy(address,address,uint256,uint256,uint256,string)': FunctionFragment;
    'getQuotaUsage(address)': FunctionFragment;
    'hasArbitratorRole(address)': FunctionFragment;
    'hasMediatorRoleOrIsManager(address)': FunctionFragment;
    'hasPolicyCreatorRoleOrIsManager(address)': FunctionFragment;
    'klerosArbitrator()': FunctionFragment;
    'klerosArbitratorAndDisputeIdToClaimIndex(address,uint256)': FunctionFragment;
    'klerosArbitratorExtraData()': FunctionFragment;
    'manager()': FunctionFragment;
    'mediatorResponsePeriod()': FunctionFragment;
    'mediatorRole()': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'policyCreatorRole()': FunctionFragment;
    'policyWithHashExists(bytes32)': FunctionFragment;
    'proposeSettlement(uint256,uint256)': FunctionFragment;
    'resetQuota(address)': FunctionFragment;
    'resolveDispute(uint256,uint8)': FunctionFragment;
    'rule(uint256,uint256)': FunctionFragment;
    'setApi3Pool(address)': FunctionFragment;
    'setArbitratorResponsePeriod(address,uint256)': FunctionFragment;
    'setClaimantResponsePeriod(uint256)': FunctionFragment;
    'setMediatorResponsePeriod(uint256)': FunctionFragment;
    'setQuota(address,uint256,uint256)': FunctionFragment;
    'submitEvidenceToKlerosArbitrator(uint256,string)': FunctionFragment;
    'timeOutClaim(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'acceptClaim', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'acceptSettlement', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'accessControlRegistry', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'accountToAccumulatedQuotaUsageCheckpoints',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'accountToQuota', values: [string]): string;
  encodeFunctionData(functionFragment: 'adminRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminRoleDescription', values?: undefined): string;
  encodeFunctionData(functionFragment: 'api3Pool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'appealKlerosArbitratorDecision', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'arbitrationParamsChanges', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'arbitrationParamsCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'arbitratorRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'arbitratorToResponsePeriod', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'changeArbitrationParams',
    values: [string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'claimCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimIndexToArbitrationParamIndex', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'claimIndexToArbitrator', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'claimIndexToProposedSettlementAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'claimantResponsePeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claims', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'createClaim',
    values: [string, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'createDispute', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'createDisputeWithKlerosArbitrator', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'createPolicy',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'getQuotaUsage', values: [string]): string;
  encodeFunctionData(functionFragment: 'hasArbitratorRole', values: [string]): string;
  encodeFunctionData(functionFragment: 'hasMediatorRoleOrIsManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'hasPolicyCreatorRoleOrIsManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'klerosArbitrator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'klerosArbitratorAndDisputeIdToClaimIndex',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'klerosArbitratorExtraData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'manager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mediatorResponsePeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mediatorRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'multicall', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'policyCreatorRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'policyWithHashExists', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'proposeSettlement', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'resetQuota', values: [string]): string;
  encodeFunctionData(functionFragment: 'resolveDispute', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rule', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setApi3Pool', values: [string]): string;
  encodeFunctionData(functionFragment: 'setArbitratorResponsePeriod', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setClaimantResponsePeriod', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMediatorResponsePeriod', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setQuota', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'submitEvidenceToKlerosArbitrator', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'timeOutClaim', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'acceptClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptSettlement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControlRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountToAccumulatedQuotaUsageCheckpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountToQuota', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminRoleDescription', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'api3Pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appealKlerosArbitratorDecision', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'arbitrationParamsChanges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'arbitrationParamsCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'arbitratorRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'arbitratorToResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeArbitrationParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimIndexToArbitrationParamIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimIndexToArbitrator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimIndexToProposedSettlementAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimantResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claims', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createDispute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createDisputeWithKlerosArbitrator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPolicy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getQuotaUsage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasArbitratorRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasMediatorRoleOrIsManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasPolicyCreatorRoleOrIsManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'klerosArbitrator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'klerosArbitratorAndDisputeIdToClaimIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'klerosArbitratorExtraData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mediatorResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mediatorRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyCreatorRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyWithHashExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposeSettlement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resetQuota', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveDispute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rule', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApi3Pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setArbitratorResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimantResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMediatorResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setQuota', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submitEvidenceToKlerosArbitrator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeOutClaim', data: BytesLike): Result;

  events: {
    'AcceptedClaim(uint256,address,address,uint256,address)': EventFragment;
    'AcceptedSettlement(uint256,address,uint256)': EventFragment;
    'AppealedKlerosArbitratorDecision(uint256,address,uint256)': EventFragment;
    'CreatedClaim(uint256,address,bytes32,address,uint256,uint256,uint256,string,uint256,string,uint256)': EventFragment;
    'CreatedDispute(uint256,address,address)': EventFragment;
    'CreatedDisputeWithKlerosArbitrator(uint256,address,uint256)': EventFragment;
    'CreatedPolicy(address,address,bytes32,uint256,uint256,uint256,string,address)': EventFragment;
    'Dispute(address,uint256,uint256,uint256)': EventFragment;
    'Evidence(address,uint256,address,string)': EventFragment;
    'MetaEvidence(uint256,string)': EventFragment;
    'ProposedSettlement(uint256,address,uint256,address)': EventFragment;
    'ResetQuota(address,address)': EventFragment;
    'ResolvedDisputeByAcceptingClaim(uint256,address,address,uint256,address)': EventFragment;
    'ResolvedDisputeByAcceptingSettlement(uint256,address,address,uint256,address)': EventFragment;
    'ResolvedDisputeByRejectingClaim(uint256,address,address)': EventFragment;
    'Ruling(address,uint256,uint256)': EventFragment;
    'SetApi3Pool(address)': EventFragment;
    'SetArbitratorResponsePeriod(address,uint256,address)': EventFragment;
    'SetClaimantResponsePeriod(uint256)': EventFragment;
    'SetMediatorResponsePeriod(uint256)': EventFragment;
    'SetQuota(address,uint256,uint256,address)': EventFragment;
    'SubmittedEvidenceToKlerosArbitrator(uint256,address,string)': EventFragment;
    'TimedOutClaim(uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AcceptedClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AcceptedSettlement'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AppealedKlerosArbitratorDecision'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatedClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatedDispute'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatedDisputeWithKlerosArbitrator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatedPolicy'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Dispute'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Evidence'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MetaEvidence'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposedSettlement'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ResetQuota'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ResolvedDisputeByAcceptingClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ResolvedDisputeByAcceptingSettlement'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ResolvedDisputeByRejectingClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Ruling'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetApi3Pool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetArbitratorResponsePeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetClaimantResponsePeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMediatorResponsePeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetQuota'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SubmittedEvidenceToKlerosArbitrator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TimedOutClaim'): EventFragment;
}

export type AcceptedClaimEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    claimIndex: BigNumber;
    claimant: string;
    beneficiary: string;
    claimAmount: BigNumber;
    sender: string;
  }
>;

export type AcceptedClaimEventFilter = TypedEventFilter<AcceptedClaimEvent>;

export type AcceptedSettlementEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { claimIndex: BigNumber; claimant: string; amount: BigNumber }
>;

export type AcceptedSettlementEventFilter = TypedEventFilter<AcceptedSettlementEvent>;

export type AppealedKlerosArbitratorDecisionEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  {
    claimIndex: BigNumber;
    sender: string;
    klerosArbitratorDisputeId: BigNumber;
  }
>;

export type AppealedKlerosArbitratorDecisionEventFilter = TypedEventFilter<AppealedKlerosArbitratorDecisionEvent>;

export type CreatedClaimEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber, string, BigNumber, string, BigNumber],
  {
    claimIndex: BigNumber;
    claimant: string;
    policyHash: string;
    beneficiary: string;
    coverageAmount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    policy: string;
    claimAmount: BigNumber;
    evidence: string;
    claimCreationTime: BigNumber;
  }
>;

export type CreatedClaimEventFilter = TypedEventFilter<CreatedClaimEvent>;

export type CreatedDisputeEvent = TypedEvent<
  [BigNumber, string, string],
  { claimIndex: BigNumber; claimant: string; arbitrator: string }
>;

export type CreatedDisputeEventFilter = TypedEventFilter<CreatedDisputeEvent>;

export type CreatedDisputeWithKlerosArbitratorEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  {
    claimIndex: BigNumber;
    claimant: string;
    klerosArbitratorDisputeId: BigNumber;
  }
>;

export type CreatedDisputeWithKlerosArbitratorEventFilter = TypedEventFilter<CreatedDisputeWithKlerosArbitratorEvent>;

export type CreatedPolicyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string, string],
  {
    beneficiary: string;
    claimant: string;
    policyHash: string;
    coverageAmount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    policy: string;
    sender: string;
  }
>;

export type CreatedPolicyEventFilter = TypedEventFilter<CreatedPolicyEvent>;

export type DisputeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    _arbitrator: string;
    _disputeID: BigNumber;
    _metaEvidenceID: BigNumber;
    _evidenceGroupID: BigNumber;
  }
>;

export type DisputeEventFilter = TypedEventFilter<DisputeEvent>;

export type EvidenceEvent = TypedEvent<
  [string, BigNumber, string, string],
  {
    _arbitrator: string;
    _evidenceGroupID: BigNumber;
    _party: string;
    _evidence: string;
  }
>;

export type EvidenceEventFilter = TypedEventFilter<EvidenceEvent>;

export type MetaEvidenceEvent = TypedEvent<[BigNumber, string], { _metaEvidenceID: BigNumber; _evidence: string }>;

export type MetaEvidenceEventFilter = TypedEventFilter<MetaEvidenceEvent>;

export type ProposedSettlementEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  { claimIndex: BigNumber; claimant: string; amount: BigNumber; sender: string }
>;

export type ProposedSettlementEventFilter = TypedEventFilter<ProposedSettlementEvent>;

export type ResetQuotaEvent = TypedEvent<[string, string], { account: string; sender: string }>;

export type ResetQuotaEventFilter = TypedEventFilter<ResetQuotaEvent>;

export type ResolvedDisputeByAcceptingClaimEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    claimIndex: BigNumber;
    claimant: string;
    beneficiary: string;
    amount: BigNumber;
    arbitrator: string;
  }
>;

export type ResolvedDisputeByAcceptingClaimEventFilter = TypedEventFilter<ResolvedDisputeByAcceptingClaimEvent>;

export type ResolvedDisputeByAcceptingSettlementEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    claimIndex: BigNumber;
    claimant: string;
    beneficiary: string;
    amount: BigNumber;
    arbitrator: string;
  }
>;

export type ResolvedDisputeByAcceptingSettlementEventFilter =
  TypedEventFilter<ResolvedDisputeByAcceptingSettlementEvent>;

export type ResolvedDisputeByRejectingClaimEvent = TypedEvent<
  [BigNumber, string, string],
  { claimIndex: BigNumber; claimant: string; arbitrator: string }
>;

export type ResolvedDisputeByRejectingClaimEventFilter = TypedEventFilter<ResolvedDisputeByRejectingClaimEvent>;

export type RulingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _arbitrator: string; _disputeID: BigNumber; _ruling: BigNumber }
>;

export type RulingEventFilter = TypedEventFilter<RulingEvent>;

export type SetApi3PoolEvent = TypedEvent<[string], { api3Pool: string }>;

export type SetApi3PoolEventFilter = TypedEventFilter<SetApi3PoolEvent>;

export type SetArbitratorResponsePeriodEvent = TypedEvent<
  [string, BigNumber, string],
  { arbitrator: string; arbitratorResponsePeriod: BigNumber; sender: string }
>;

export type SetArbitratorResponsePeriodEventFilter = TypedEventFilter<SetArbitratorResponsePeriodEvent>;

export type SetClaimantResponsePeriodEvent = TypedEvent<[BigNumber], { claimantResponsePeriod: BigNumber }>;

export type SetClaimantResponsePeriodEventFilter = TypedEventFilter<SetClaimantResponsePeriodEvent>;

export type SetMediatorResponsePeriodEvent = TypedEvent<[BigNumber], { mediatorResponsePeriod: BigNumber }>;

export type SetMediatorResponsePeriodEventFilter = TypedEventFilter<SetMediatorResponsePeriodEvent>;

export type SetQuotaEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { account: string; period: BigNumber; amount: BigNumber; sender: string }
>;

export type SetQuotaEventFilter = TypedEventFilter<SetQuotaEvent>;

export type SubmittedEvidenceToKlerosArbitratorEvent = TypedEvent<
  [BigNumber, string, string],
  { claimIndex: BigNumber; sender: string; evidence: string }
>;

export type SubmittedEvidenceToKlerosArbitratorEventFilter = TypedEventFilter<SubmittedEvidenceToKlerosArbitratorEvent>;

export type TimedOutClaimEvent = TypedEvent<[BigNumber, string], { claimIndex: BigNumber; claimant: string }>;

export type TimedOutClaimEventFilter = TypedEventFilter<TimedOutClaimEvent>;

export interface ClaimsManagerWithKlerosArbitrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClaimsManagerWithKlerosArbitratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptClaim(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptSettlement(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accessControlRegistry(overrides?: CallOverrides): Promise<[string]>;

    accountToAccumulatedQuotaUsageCheckpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromTimestamp: BigNumber; value: BigNumber }>;

    accountToQuota(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { period: BigNumber; amount: BigNumber }>;

    adminRole(overrides?: CallOverrides): Promise<[string]>;

    adminRoleDescription(overrides?: CallOverrides): Promise<[string]>;

    api3Pool(overrides?: CallOverrides): Promise<[string]>;

    appealKlerosArbitratorDecision(
      claimIndex: BigNumberish,
      klerosArbitratorDisputeId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arbitrationParamsChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & {
        klerosArbitrator: string;
        klerosArbitratorExtraData: string;
      }
    >;

    arbitrationParamsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    arbitratorRole(overrides?: CallOverrides): Promise<[string]>;

    arbitratorToResponsePeriod(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeArbitrationParams(
      _klerosArbitrator: string,
      _klerosArbitratorExtraData: BytesLike,
      _metaEvidence: string,
      _klerosArbitratorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimIndexToArbitrationParamIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimIndexToArbitrator(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    claimIndexToProposedSettlementAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimantResponsePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    claims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, BigNumber, number] & {
        claimant: string;
        beneficiary: string;
        amount: BigNumber;
        evidence: string;
        updateTime: BigNumber;
        status: number;
      }
    >;

    createClaim(
      beneficiary: string,
      coverageAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      policy: string,
      claimAmount: BigNumberish,
      evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDispute(
      claimIndex: BigNumberish,
      arbitrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDisputeWithKlerosArbitrator(
      claimIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPolicy(
      claimant: string,
      beneficiary: string,
      coverageAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      policy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getQuotaUsage(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    hasArbitratorRole(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    hasMediatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    hasPolicyCreatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    klerosArbitrator(overrides?: CallOverrides): Promise<[string]>;

    klerosArbitratorAndDisputeIdToClaimIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    klerosArbitratorExtraData(overrides?: CallOverrides): Promise<[string]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    mediatorResponsePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    mediatorRole(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    policyCreatorRole(overrides?: CallOverrides): Promise<[string]>;

    policyWithHashExists(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    proposeSettlement(
      claimIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetQuota(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveDispute(
      claimIndex: BigNumberish,
      result: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rule(
      disputeId: BigNumberish,
      ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApi3Pool(
      _api3Pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArbitratorResponsePeriod(
      arbitrator: string,
      arbitratorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimantResponsePeriod(
      _claimantResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMediatorResponsePeriod(
      _mediatorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQuota(
      account: string,
      period: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitEvidenceToKlerosArbitrator(
      claimIndex: BigNumberish,
      evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeOutClaim(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptClaim(
    claimIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptSettlement(
    claimIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accessControlRegistry(overrides?: CallOverrides): Promise<string>;

  accountToAccumulatedQuotaUsageCheckpoints(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fromTimestamp: BigNumber; value: BigNumber }>;

  accountToQuota(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { period: BigNumber; amount: BigNumber }>;

  adminRole(overrides?: CallOverrides): Promise<string>;

  adminRoleDescription(overrides?: CallOverrides): Promise<string>;

  api3Pool(overrides?: CallOverrides): Promise<string>;

  appealKlerosArbitratorDecision(
    claimIndex: BigNumberish,
    klerosArbitratorDisputeId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arbitrationParamsChanges(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & {
      klerosArbitrator: string;
      klerosArbitratorExtraData: string;
    }
  >;

  arbitrationParamsCount(overrides?: CallOverrides): Promise<BigNumber>;

  arbitratorRole(overrides?: CallOverrides): Promise<string>;

  arbitratorToResponsePeriod(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeArbitrationParams(
    _klerosArbitrator: string,
    _klerosArbitratorExtraData: BytesLike,
    _metaEvidence: string,
    _klerosArbitratorResponsePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCount(overrides?: CallOverrides): Promise<BigNumber>;

  claimIndexToArbitrationParamIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  claimIndexToArbitrator(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  claimIndexToProposedSettlementAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  claimantResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  claims(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, BigNumber, number] & {
      claimant: string;
      beneficiary: string;
      amount: BigNumber;
      evidence: string;
      updateTime: BigNumber;
      status: number;
    }
  >;

  createClaim(
    beneficiary: string,
    coverageAmount: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    policy: string,
    claimAmount: BigNumberish,
    evidence: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDispute(
    claimIndex: BigNumberish,
    arbitrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDisputeWithKlerosArbitrator(
    claimIndex: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPolicy(
    claimant: string,
    beneficiary: string,
    coverageAmount: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    policy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getQuotaUsage(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  hasArbitratorRole(account: string, overrides?: CallOverrides): Promise<boolean>;

  hasMediatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<boolean>;

  hasPolicyCreatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<boolean>;

  klerosArbitrator(overrides?: CallOverrides): Promise<string>;

  klerosArbitratorAndDisputeIdToClaimIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  klerosArbitratorExtraData(overrides?: CallOverrides): Promise<string>;

  manager(overrides?: CallOverrides): Promise<string>;

  mediatorResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  mediatorRole(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  policyCreatorRole(overrides?: CallOverrides): Promise<string>;

  policyWithHashExists(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  proposeSettlement(
    claimIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetQuota(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveDispute(
    claimIndex: BigNumberish,
    result: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rule(
    disputeId: BigNumberish,
    ruling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApi3Pool(
    _api3Pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArbitratorResponsePeriod(
    arbitrator: string,
    arbitratorResponsePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimantResponsePeriod(
    _claimantResponsePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMediatorResponsePeriod(
    _mediatorResponsePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQuota(
    account: string,
    period: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitEvidenceToKlerosArbitrator(
    claimIndex: BigNumberish,
    evidence: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeOutClaim(
    claimIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptClaim(claimIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    acceptSettlement(claimIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    accessControlRegistry(overrides?: CallOverrides): Promise<string>;

    accountToAccumulatedQuotaUsageCheckpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fromTimestamp: BigNumber; value: BigNumber }>;

    accountToQuota(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { period: BigNumber; amount: BigNumber }>;

    adminRole(overrides?: CallOverrides): Promise<string>;

    adminRoleDescription(overrides?: CallOverrides): Promise<string>;

    api3Pool(overrides?: CallOverrides): Promise<string>;

    appealKlerosArbitratorDecision(
      claimIndex: BigNumberish,
      klerosArbitratorDisputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    arbitrationParamsChanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & {
        klerosArbitrator: string;
        klerosArbitratorExtraData: string;
      }
    >;

    arbitrationParamsCount(overrides?: CallOverrides): Promise<BigNumber>;

    arbitratorRole(overrides?: CallOverrides): Promise<string>;

    arbitratorToResponsePeriod(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeArbitrationParams(
      _klerosArbitrator: string,
      _klerosArbitratorExtraData: BytesLike,
      _metaEvidence: string,
      _klerosArbitratorResponsePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCount(overrides?: CallOverrides): Promise<BigNumber>;

    claimIndexToArbitrationParamIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimIndexToArbitrator(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    claimIndexToProposedSettlementAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimantResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    claims(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, BigNumber, number] & {
        claimant: string;
        beneficiary: string;
        amount: BigNumber;
        evidence: string;
        updateTime: BigNumber;
        status: number;
      }
    >;

    createClaim(
      beneficiary: string,
      coverageAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      policy: string,
      claimAmount: BigNumberish,
      evidence: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDispute(claimIndex: BigNumberish, arbitrator: string, overrides?: CallOverrides): Promise<void>;

    createDisputeWithKlerosArbitrator(claimIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createPolicy(
      claimant: string,
      beneficiary: string,
      coverageAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      policy: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getQuotaUsage(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasArbitratorRole(account: string, overrides?: CallOverrides): Promise<boolean>;

    hasMediatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<boolean>;

    hasPolicyCreatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<boolean>;

    klerosArbitrator(overrides?: CallOverrides): Promise<string>;

    klerosArbitratorAndDisputeIdToClaimIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    klerosArbitratorExtraData(overrides?: CallOverrides): Promise<string>;

    manager(overrides?: CallOverrides): Promise<string>;

    mediatorResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    mediatorRole(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    policyCreatorRole(overrides?: CallOverrides): Promise<string>;

    policyWithHashExists(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    proposeSettlement(claimIndex: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    resetQuota(account: string, overrides?: CallOverrides): Promise<void>;

    resolveDispute(claimIndex: BigNumberish, result: BigNumberish, overrides?: CallOverrides): Promise<void>;

    rule(disputeId: BigNumberish, ruling: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setApi3Pool(_api3Pool: string, overrides?: CallOverrides): Promise<void>;

    setArbitratorResponsePeriod(
      arbitrator: string,
      arbitratorResponsePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimantResponsePeriod(_claimantResponsePeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMediatorResponsePeriod(_mediatorResponsePeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setQuota(account: string, period: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    submitEvidenceToKlerosArbitrator(
      claimIndex: BigNumberish,
      evidence: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timeOutClaim(claimIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AcceptedClaim(uint256,address,address,uint256,address)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      beneficiary?: null,
      claimAmount?: null,
      sender?: null
    ): AcceptedClaimEventFilter;
    AcceptedClaim(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      beneficiary?: null,
      claimAmount?: null,
      sender?: null
    ): AcceptedClaimEventFilter;

    'AcceptedSettlement(uint256,address,uint256)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      amount?: null
    ): AcceptedSettlementEventFilter;
    AcceptedSettlement(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      amount?: null
    ): AcceptedSettlementEventFilter;

    'AppealedKlerosArbitratorDecision(uint256,address,uint256)'(
      claimIndex?: BigNumberish | null,
      sender?: string | null,
      klerosArbitratorDisputeId?: BigNumberish | null
    ): AppealedKlerosArbitratorDecisionEventFilter;
    AppealedKlerosArbitratorDecision(
      claimIndex?: BigNumberish | null,
      sender?: string | null,
      klerosArbitratorDisputeId?: BigNumberish | null
    ): AppealedKlerosArbitratorDecisionEventFilter;

    'CreatedClaim(uint256,address,bytes32,address,uint256,uint256,uint256,string,uint256,string,uint256)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      policyHash?: BytesLike | null,
      beneficiary?: null,
      coverageAmount?: null,
      startTime?: null,
      endTime?: null,
      policy?: null,
      claimAmount?: null,
      evidence?: null,
      claimCreationTime?: null
    ): CreatedClaimEventFilter;
    CreatedClaim(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      policyHash?: BytesLike | null,
      beneficiary?: null,
      coverageAmount?: null,
      startTime?: null,
      endTime?: null,
      policy?: null,
      claimAmount?: null,
      evidence?: null,
      claimCreationTime?: null
    ): CreatedClaimEventFilter;

    'CreatedDispute(uint256,address,address)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      arbitrator?: null
    ): CreatedDisputeEventFilter;
    CreatedDispute(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      arbitrator?: null
    ): CreatedDisputeEventFilter;

    'CreatedDisputeWithKlerosArbitrator(uint256,address,uint256)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      klerosArbitratorDisputeId?: BigNumberish | null
    ): CreatedDisputeWithKlerosArbitratorEventFilter;
    CreatedDisputeWithKlerosArbitrator(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      klerosArbitratorDisputeId?: BigNumberish | null
    ): CreatedDisputeWithKlerosArbitratorEventFilter;

    'CreatedPolicy(address,address,bytes32,uint256,uint256,uint256,string,address)'(
      beneficiary?: null,
      claimant?: string | null,
      policyHash?: BytesLike | null,
      coverageAmount?: null,
      startTime?: null,
      endTime?: null,
      policy?: null,
      sender?: null
    ): CreatedPolicyEventFilter;
    CreatedPolicy(
      beneficiary?: null,
      claimant?: string | null,
      policyHash?: BytesLike | null,
      coverageAmount?: null,
      startTime?: null,
      endTime?: null,
      policy?: null,
      sender?: null
    ): CreatedPolicyEventFilter;

    'Dispute(address,uint256,uint256,uint256)'(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;
    Dispute(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;

    'Evidence(address,uint256,address,string)'(
      _arbitrator?: string | null,
      _evidenceGroupID?: BigNumberish | null,
      _party?: string | null,
      _evidence?: null
    ): EvidenceEventFilter;
    Evidence(
      _arbitrator?: string | null,
      _evidenceGroupID?: BigNumberish | null,
      _party?: string | null,
      _evidence?: null
    ): EvidenceEventFilter;

    'MetaEvidence(uint256,string)'(_metaEvidenceID?: BigNumberish | null, _evidence?: null): MetaEvidenceEventFilter;
    MetaEvidence(_metaEvidenceID?: BigNumberish | null, _evidence?: null): MetaEvidenceEventFilter;

    'ProposedSettlement(uint256,address,uint256,address)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      amount?: null,
      sender?: null
    ): ProposedSettlementEventFilter;
    ProposedSettlement(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      amount?: null,
      sender?: null
    ): ProposedSettlementEventFilter;

    'ResetQuota(address,address)'(account?: string | null, sender?: null): ResetQuotaEventFilter;
    ResetQuota(account?: string | null, sender?: null): ResetQuotaEventFilter;

    'ResolvedDisputeByAcceptingClaim(uint256,address,address,uint256,address)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      beneficiary?: null,
      amount?: null,
      arbitrator?: null
    ): ResolvedDisputeByAcceptingClaimEventFilter;
    ResolvedDisputeByAcceptingClaim(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      beneficiary?: null,
      amount?: null,
      arbitrator?: null
    ): ResolvedDisputeByAcceptingClaimEventFilter;

    'ResolvedDisputeByAcceptingSettlement(uint256,address,address,uint256,address)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      beneficiary?: null,
      amount?: null,
      arbitrator?: null
    ): ResolvedDisputeByAcceptingSettlementEventFilter;
    ResolvedDisputeByAcceptingSettlement(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      beneficiary?: null,
      amount?: null,
      arbitrator?: null
    ): ResolvedDisputeByAcceptingSettlementEventFilter;

    'ResolvedDisputeByRejectingClaim(uint256,address,address)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      arbitrator?: null
    ): ResolvedDisputeByRejectingClaimEventFilter;
    ResolvedDisputeByRejectingClaim(
      claimIndex?: BigNumberish | null,
      claimant?: string | null,
      arbitrator?: null
    ): ResolvedDisputeByRejectingClaimEventFilter;

    'Ruling(address,uint256,uint256)'(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _ruling?: null
    ): RulingEventFilter;
    Ruling(_arbitrator?: string | null, _disputeID?: BigNumberish | null, _ruling?: null): RulingEventFilter;

    'SetApi3Pool(address)'(api3Pool?: null): SetApi3PoolEventFilter;
    SetApi3Pool(api3Pool?: null): SetApi3PoolEventFilter;

    'SetArbitratorResponsePeriod(address,uint256,address)'(
      arbitrator?: string | null,
      arbitratorResponsePeriod?: null,
      sender?: null
    ): SetArbitratorResponsePeriodEventFilter;
    SetArbitratorResponsePeriod(
      arbitrator?: string | null,
      arbitratorResponsePeriod?: null,
      sender?: null
    ): SetArbitratorResponsePeriodEventFilter;

    'SetClaimantResponsePeriod(uint256)'(claimantResponsePeriod?: null): SetClaimantResponsePeriodEventFilter;
    SetClaimantResponsePeriod(claimantResponsePeriod?: null): SetClaimantResponsePeriodEventFilter;

    'SetMediatorResponsePeriod(uint256)'(mediatorResponsePeriod?: null): SetMediatorResponsePeriodEventFilter;
    SetMediatorResponsePeriod(mediatorResponsePeriod?: null): SetMediatorResponsePeriodEventFilter;

    'SetQuota(address,uint256,uint256,address)'(
      account?: string | null,
      period?: null,
      amount?: null,
      sender?: null
    ): SetQuotaEventFilter;
    SetQuota(account?: string | null, period?: null, amount?: null, sender?: null): SetQuotaEventFilter;

    'SubmittedEvidenceToKlerosArbitrator(uint256,address,string)'(
      claimIndex?: BigNumberish | null,
      sender?: string | null,
      evidence?: null
    ): SubmittedEvidenceToKlerosArbitratorEventFilter;
    SubmittedEvidenceToKlerosArbitrator(
      claimIndex?: BigNumberish | null,
      sender?: string | null,
      evidence?: null
    ): SubmittedEvidenceToKlerosArbitratorEventFilter;

    'TimedOutClaim(uint256,address)'(
      claimIndex?: BigNumberish | null,
      claimant?: string | null
    ): TimedOutClaimEventFilter;
    TimedOutClaim(claimIndex?: BigNumberish | null, claimant?: string | null): TimedOutClaimEventFilter;
  };

  estimateGas: {
    acceptClaim(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptSettlement(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accessControlRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    accountToAccumulatedQuotaUsageCheckpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountToQuota(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    adminRole(overrides?: CallOverrides): Promise<BigNumber>;

    adminRoleDescription(overrides?: CallOverrides): Promise<BigNumber>;

    api3Pool(overrides?: CallOverrides): Promise<BigNumber>;

    appealKlerosArbitratorDecision(
      claimIndex: BigNumberish,
      klerosArbitratorDisputeId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arbitrationParamsChanges(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    arbitrationParamsCount(overrides?: CallOverrides): Promise<BigNumber>;

    arbitratorRole(overrides?: CallOverrides): Promise<BigNumber>;

    arbitratorToResponsePeriod(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeArbitrationParams(
      _klerosArbitrator: string,
      _klerosArbitratorExtraData: BytesLike,
      _metaEvidence: string,
      _klerosArbitratorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCount(overrides?: CallOverrides): Promise<BigNumber>;

    claimIndexToArbitrationParamIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimIndexToArbitrator(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimIndexToProposedSettlementAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimantResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    claims(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createClaim(
      beneficiary: string,
      coverageAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      policy: string,
      claimAmount: BigNumberish,
      evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDispute(
      claimIndex: BigNumberish,
      arbitrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDisputeWithKlerosArbitrator(
      claimIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPolicy(
      claimant: string,
      beneficiary: string,
      coverageAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      policy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getQuotaUsage(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasArbitratorRole(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasMediatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasPolicyCreatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    klerosArbitrator(overrides?: CallOverrides): Promise<BigNumber>;

    klerosArbitratorAndDisputeIdToClaimIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    klerosArbitratorExtraData(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    mediatorResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    mediatorRole(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    policyCreatorRole(overrides?: CallOverrides): Promise<BigNumber>;

    policyWithHashExists(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    proposeSettlement(
      claimIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetQuota(account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    resolveDispute(
      claimIndex: BigNumberish,
      result: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rule(
      disputeId: BigNumberish,
      ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApi3Pool(_api3Pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setArbitratorResponsePeriod(
      arbitrator: string,
      arbitratorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimantResponsePeriod(
      _claimantResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMediatorResponsePeriod(
      _mediatorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQuota(
      account: string,
      period: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitEvidenceToKlerosArbitrator(
      claimIndex: BigNumberish,
      evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeOutClaim(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptClaim(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptSettlement(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accessControlRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountToAccumulatedQuotaUsageCheckpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountToQuota(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminRoleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    api3Pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appealKlerosArbitratorDecision(
      claimIndex: BigNumberish,
      klerosArbitratorDisputeId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arbitrationParamsChanges(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitrationParamsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitratorRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitratorToResponsePeriod(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeArbitrationParams(
      _klerosArbitrator: string,
      _klerosArbitratorExtraData: BytesLike,
      _metaEvidence: string,
      _klerosArbitratorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimIndexToArbitrationParamIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimIndexToArbitrator(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimIndexToProposedSettlementAmount(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimantResponsePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claims(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createClaim(
      beneficiary: string,
      coverageAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      policy: string,
      claimAmount: BigNumberish,
      evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDispute(
      claimIndex: BigNumberish,
      arbitrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDisputeWithKlerosArbitrator(
      claimIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPolicy(
      claimant: string,
      beneficiary: string,
      coverageAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      policy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getQuotaUsage(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasArbitratorRole(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasMediatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPolicyCreatorRoleOrIsManager(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    klerosArbitrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    klerosArbitratorAndDisputeIdToClaimIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    klerosArbitratorExtraData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mediatorResponsePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mediatorRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    policyCreatorRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyWithHashExists(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeSettlement(
      claimIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetQuota(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveDispute(
      claimIndex: BigNumberish,
      result: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rule(
      disputeId: BigNumberish,
      ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApi3Pool(
      _api3Pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArbitratorResponsePeriod(
      arbitrator: string,
      arbitratorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimantResponsePeriod(
      _claimantResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMediatorResponsePeriod(
      _mediatorResponsePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQuota(
      account: string,
      period: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitEvidenceToKlerosArbitrator(
      claimIndex: BigNumberish,
      evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeOutClaim(
      claimIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

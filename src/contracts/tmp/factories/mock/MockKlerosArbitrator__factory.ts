/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../common';
import type { MockKlerosArbitrator, MockKlerosArbitratorInterface } from '../../mock/MockKlerosArbitrator';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_currentTime',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_appealPeriodEnd',
        type: 'uint256',
      },
    ],
    name: 'AfterAppealPeriodEnd',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_currentTime',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_appealPeriodEnd',
        type: 'uint256',
      },
    ],
    name: 'BeforeAppealPeriodEnd',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_available',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_required',
        type: 'uint256',
      },
    ],
    name: 'InsufficientPayment',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_ruling',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_numberOfChoices',
        type: 'uint256',
      },
    ],
    name: 'InvalidRuling',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'enum IArbitrator.DisputeStatus',
        name: '_current',
        type: 'uint8',
      },
      {
        internalType: 'enum IArbitrator.DisputeStatus',
        name: '_expected',
        type: 'uint8',
      },
    ],
    name: 'InvalidStatus',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOwner',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'contract IArbitrable',
        name: '_arbitrable',
        type: 'address',
      },
    ],
    name: 'AppealDecision',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'contract IArbitrable',
        name: '_arbitrable',
        type: 'address',
      },
    ],
    name: 'AppealPossible',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'contract IArbitrable',
        name: '_arbitrable',
        type: 'address',
      },
    ],
    name: 'DisputeCreation',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_extraData',
        type: 'bytes',
      },
    ],
    name: 'appeal',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_extraData',
        type: 'bytes',
      },
    ],
    name: 'appealCost',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
    ],
    name: 'appealPeriod',
    outputs: [
      {
        internalType: 'uint256',
        name: 'start',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'end',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_extraData',
        type: 'bytes',
      },
    ],
    name: 'arbitrationCost',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_choices',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_extraData',
        type: 'bytes',
      },
    ],
    name: 'createDispute',
    outputs: [
      {
        internalType: 'uint256',
        name: 'disputeID',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
    ],
    name: 'currentRuling',
    outputs: [
      {
        internalType: 'uint256',
        name: 'ruling',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
    ],
    name: 'disputeStatus',
    outputs: [
      {
        internalType: 'enum IArbitrator.DisputeStatus',
        name: 'status',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'disputes',
    outputs: [
      {
        internalType: 'contract IArbitrable',
        name: 'arbitrated',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'choices',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'ruling',
        type: 'uint256',
      },
      {
        internalType: 'enum IArbitrator.DisputeStatus',
        name: 'status',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'appealPeriodStart',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'appealPeriodEnd',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'appealCount',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
    ],
    name: 'executeRuling',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_disputeID',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_ruling',
        type: 'uint256',
      },
    ],
    name: 'giveRuling',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_newCost',
        type: 'uint256',
      },
    ],
    name: 'setArbitrationCost',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x6080604052600080546001600160a01b0319163317905566038d7ea4c6800060015534801561002d57600080fd5b50610d668061003d6000396000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b14610198578063afe15cfb146101d0578063c13517e114610205578063c97c4d5c14610218578063f23f16e614610238578063f7434ea91461025857600080fd5b806310f169e8146100ac5780631c3db16d146100e25780631d77b92c1461011057806349912f8814610132578063564a565d146101455780638bb0487514610178575b600080fd5b3480156100b857600080fd5b506100cc6100c7366004610998565b61027a565b6040516100d991906109e9565b60405180910390f35b3480156100ee57600080fd5b506101026100fd366004610998565b61032f565b6040519081526020016100d9565b34801561011c57600080fd5b5061013061012b366004610998565b600155565b005b610130610140366004610a9a565b61035d565b34801561015157600080fd5b50610165610160366004610998565b61049d565b6040516100d99796959493929190610ae1565b34801561018457600080fd5b50610130610193366004610998565b6104fa565b3480156101a457600080fd5b506000546101b8906001600160a01b031681565b6040516001600160a01b0390911681526020016100d9565b3480156101dc57600080fd5b506101f06101eb366004610998565b610618565b604080519283526020830191909152016100d9565b610102610213366004610a9a565b610654565b34801561022457600080fd5b50610130610233366004610b2a565b610818565b34801561024457600080fd5b50610102610253366004610a9a565b61094f565b34801561026457600080fd5b50610102610273366004610b4c565b5060015490565b6000806002838154811061029057610290610b89565b6000918252602090912060079091020190506001600284815481106102b7576102b7610b89565b600091825260209091206003600790920201015460ff1660028111156102df576102df6109b1565b1480156102f0575080600501544210155b156102fe5750600292915050565b6002838154811061031157610311610b89565b600091825260209091206003600790920201015460ff169392505050565b60006002828154811061034457610344610b89565b9060005260206000209060070201600201549050919050565b60006002838154811061037257610372610b89565b9060005260206000209060070201905080600601600081548092919061039790610bb5565b919050555060006103a8848461094f565b9050803410156103d95760405163b99e2ab760e01b8152346004820152602481018290526044015b60405180910390fd5b6001600383015460ff1660028111156103f4576103f46109b1565b1461041e57600382015460405163f924664d60e01b81526103d09160ff1690600190600401610bd0565b8160050154421115610452576005820154604051638113c91360e01b815242600482015260248101919091526044016103d0565b60038201805460ff1916905581546040516001600160a01b039091169085907f9c9b64db9e130f48381bf697abf638e73117dbfbfd7a4484f2da3ba188f4187d90600090a350505050565b600281815481106104ad57600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b0390951696509294919360ff90911692919087565b60006002828154811061050f5761050f610b89565b6000918252602090912060079091020190506001600382015460ff16600281111561053c5761053c6109b1565b1461056657600381015460405163f924664d60e01b81526103d09160ff1690600190600401610bd0565b80600501544211610599576005810154604051630734f2fd60e51b815242600482015260248101919091526044016103d0565b60038101805460ff1916600290811790915581549082015460405163188d362b60e11b81526004810185905260248101919091526001600160a01b039091169063311a6c5690604401600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b505050505050565b60008060006002848154811061063057610630610b89565b90600052602060002090600702019050806004015481600501549250925050915091565b60008061066060015490565b90508034111561068c5760405163b99e2ab760e01b8152346004820152602481018290526044016103d0565b6040805160e081018252338152602081018681526000928201838152606083018481526080840185905260a0840185905260c0840185905260028054600180820183559682905285517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600790920291820180546001600160a01b0319166001600160a01b0390921691909117815594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad084015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad19092018054949593949293909260ff19169184908111156107ad576107ad6109b1565b02179055506080820151600482015560a0820151600582015560c0909101516006909101556002546107e190600190610bf2565b604051909250339083907f141dfc18aa6a56fc816f44f0e9e2f1ebc92b15ab167770e17db5b084c10ed99590600090a35092915050565b6000546001600160a01b03163314610843576040516330cd747160e01b815260040160405180910390fd5b60006002838154811061085857610858610b89565b90600052602060002090600702019050806001015482111561089d576001810154604051635babddd760e01b81526103d0918491600401918252602082015260400190565b6000600382015460ff1660028111156108b8576108b86109b1565b146108e257600381015460405163f924664d60e01b81526103d09160ff1690600090600401610bd0565b6002810182905560038101805460ff19166001179055426004820181905561090c9060b490610c09565b600582015580546040516001600160a01b039091169084907fa5d41b970d849372be1da1481ffd78d162bfe57a7aa2fe4e5fb73481fa5ac24f90600090a3505050565b60006002838154811061096457610964610b89565b90600052602060002090600702016006015460026109829190610d05565b60015461098f9190610d11565b90505b92915050565b6000602082840312156109aa57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600381106109e557634e487b7160e01b600052602160045260246000fd5b9052565b6020810161099282846109c7565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a1e57600080fd5b813567ffffffffffffffff80821115610a3957610a396109f7565b604051601f8301601f19908116603f01168101908282118183101715610a6157610a616109f7565b81604052838152866020858801011115610a7a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215610aad57600080fd5b82359150602083013567ffffffffffffffff811115610acb57600080fd5b610ad785828601610a0d565b9150509250929050565b6001600160a01b0388168152602081018790526040810186905260e08101610b0c60608301876109c7565b8460808301528360a08301528260c083015298975050505050505050565b60008060408385031215610b3d57600080fd5b50508035926020909101359150565b600060208284031215610b5e57600080fd5b813567ffffffffffffffff811115610b7557600080fd5b610b8184828501610a0d565b949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610bc957610bc9610b9f565b5060010190565b60408101610bde82856109c7565b610beb60208301846109c7565b9392505050565b600082821015610c0457610c04610b9f565b500390565b60008219821115610c1c57610c1c610b9f565b500190565b600181815b80851115610c5c578160001904821115610c4257610c42610b9f565b80851615610c4f57918102915b93841c9390800290610c26565b509250929050565b600082610c7357506001610992565b81610c8057506000610992565b8160018114610c965760028114610ca057610cbc565b6001915050610992565b60ff841115610cb157610cb1610b9f565b50506001821b610992565b5060208310610133831016604e8410600b8410161715610cdf575081810a610992565b610ce98383610c21565b8060001904821115610cfd57610cfd610b9f565b029392505050565b600061098f8383610c64565b6000816000190483118215151615610d2b57610d2b610b9f565b50029056fea264697066735822122070dddc65e256bcfdee582614253803f23d6c31ea8a79fc2b75e1ded29d78ece764736f6c63430008090033';

type MockKlerosArbitratorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockKlerosArbitratorConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockKlerosArbitrator__factory extends ContractFactory {
  constructor(...args: MockKlerosArbitratorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MockKlerosArbitrator> {
    return super.deploy(overrides || {}) as Promise<MockKlerosArbitrator>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockKlerosArbitrator {
    return super.attach(address) as MockKlerosArbitrator;
  }
  override connect(signer: Signer): MockKlerosArbitrator__factory {
    return super.connect(signer) as MockKlerosArbitrator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockKlerosArbitratorInterface {
    return new utils.Interface(_abi) as MockKlerosArbitratorInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockKlerosArbitrator {
    return new Contract(address, _abi, signerOrProvider) as MockKlerosArbitrator;
  }
}

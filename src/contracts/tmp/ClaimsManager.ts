/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface ClaimsManagerInterface extends utils.Interface {
  functions: {
    'acceptClaim(uint256)': FunctionFragment;
    'acceptSettlement(uint256)': FunctionFragment;
    'accessControlRegistry()': FunctionFragment;
    'accountToAccumulatedQuotaUsageCheckpoints(address,uint256)': FunctionFragment;
    'accountToQuota(address)': FunctionFragment;
    'adminRole()': FunctionFragment;
    'adminRoleDescription()': FunctionFragment;
    'api3Pool()': FunctionFragment;
    'api3ToUsdReader()': FunctionFragment;
    'arbitratorRole()': FunctionFragment;
    'arbitratorToResponsePeriod(address)': FunctionFragment;
    'claimCount()': FunctionFragment;
    'claimIndexToArbitrator(uint256)': FunctionFragment;
    'claimIndexToProposedSettlementAmountInApi3(uint256)': FunctionFragment;
    'claimIndexToProposedSettlementAmountInUsd(uint256)': FunctionFragment;
    'claimantResponsePeriod()': FunctionFragment;
    'claims(uint256)': FunctionFragment;
    'createClaim(address,uint256,string,uint256,string)': FunctionFragment;
    'createDispute(uint256)': FunctionFragment;
    'createPolicy(address,address,uint256,uint256,uint256,string,string)': FunctionFragment;
    'getQuotaUsage(address)': FunctionFragment;
    'isManagerOrMediator(address)': FunctionFragment;
    'manager()': FunctionFragment;
    'mediatorResponsePeriod()': FunctionFragment;
    'mediatorRole()': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'policyCreatorRole()': FunctionFragment;
    'policyHashToState(bytes32)': FunctionFragment;
    'proposeSettlement(uint256,uint256)': FunctionFragment;
    'resetQuota(address)': FunctionFragment;
    'resolveDispute(uint256,uint8)': FunctionFragment;
    'setApi3Pool(address)': FunctionFragment;
    'setApi3ToUsdReader(address)': FunctionFragment;
    'setArbitratorResponsePeriod(address,uint256)': FunctionFragment;
    'setClaimantResponsePeriod(uint256)': FunctionFragment;
    'setMediatorResponsePeriod(uint256)': FunctionFragment;
    'setQuota(address,uint32,uint224)': FunctionFragment;
    'upgradePolicy(address,address,uint256,uint256,uint256,string,string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptClaim'
      | 'acceptSettlement'
      | 'accessControlRegistry'
      | 'accountToAccumulatedQuotaUsageCheckpoints'
      | 'accountToQuota'
      | 'adminRole'
      | 'adminRoleDescription'
      | 'api3Pool'
      | 'api3ToUsdReader'
      | 'arbitratorRole'
      | 'arbitratorToResponsePeriod'
      | 'claimCount'
      | 'claimIndexToArbitrator'
      | 'claimIndexToProposedSettlementAmountInApi3'
      | 'claimIndexToProposedSettlementAmountInUsd'
      | 'claimantResponsePeriod'
      | 'claims'
      | 'createClaim'
      | 'createDispute'
      | 'createPolicy'
      | 'getQuotaUsage'
      | 'isManagerOrMediator'
      | 'manager'
      | 'mediatorResponsePeriod'
      | 'mediatorRole'
      | 'multicall'
      | 'policyCreatorRole'
      | 'policyHashToState'
      | 'proposeSettlement'
      | 'resetQuota'
      | 'resolveDispute'
      | 'setApi3Pool'
      | 'setApi3ToUsdReader'
      | 'setArbitratorResponsePeriod'
      | 'setClaimantResponsePeriod'
      | 'setMediatorResponsePeriod'
      | 'setQuota'
      | 'upgradePolicy'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptClaim', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'acceptSettlement', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'accessControlRegistry', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'accountToAccumulatedQuotaUsageCheckpoints',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'accountToQuota', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'adminRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminRoleDescription', values?: undefined): string;
  encodeFunctionData(functionFragment: 'api3Pool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'api3ToUsdReader', values?: undefined): string;
  encodeFunctionData(functionFragment: 'arbitratorRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'arbitratorToResponsePeriod', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claimCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimIndexToArbitrator', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'claimIndexToProposedSettlementAmountInApi3',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimIndexToProposedSettlementAmountInUsd',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'claimantResponsePeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claims', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'createClaim',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'createDispute', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'createPolicy',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'getQuotaUsage', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isManagerOrMediator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'manager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mediatorResponsePeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mediatorRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'multicall', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(functionFragment: 'policyCreatorRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'policyHashToState', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'proposeSettlement',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'resetQuota', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'resolveDispute',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setApi3Pool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setApi3ToUsdReader', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setArbitratorResponsePeriod',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: 'setClaimantResponsePeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMediatorResponsePeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setQuota',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'upgradePolicy',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'acceptClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptSettlement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accessControlRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountToAccumulatedQuotaUsageCheckpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountToQuota', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminRoleDescription', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'api3Pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'api3ToUsdReader', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'arbitratorRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'arbitratorToResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimIndexToArbitrator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimIndexToProposedSettlementAmountInApi3', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimIndexToProposedSettlementAmountInUsd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimantResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claims', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createDispute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPolicy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getQuotaUsage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isManagerOrMediator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mediatorResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mediatorRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyCreatorRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyHashToState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposeSettlement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resetQuota', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveDispute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApi3Pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApi3ToUsdReader', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setArbitratorResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimantResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMediatorResponsePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setQuota', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradePolicy', data: BytesLike): Result;

  events: {
    'AcceptedClaim(uint256,address,address,uint256,address)': EventFragment;
    'AcceptedSettlement(uint256,address,uint256)': EventFragment;
    'CreatedClaim(uint256,address,bytes32,address,uint256,string,uint256,string,uint256)': EventFragment;
    'CreatedDispute(uint256,address,address)': EventFragment;
    'CreatedPolicy(address,address,bytes32,uint256,uint256,uint256,string,string,address)': EventFragment;
    'ProposedSettlement(uint256,address,uint256,uint256,address)': EventFragment;
    'ResetQuota(address,address)': EventFragment;
    'ResolvedDisputeByAcceptingClaim(uint256,address,address,uint256,address)': EventFragment;
    'ResolvedDisputeByAcceptingSettlement(uint256,address,address,uint256,address)': EventFragment;
    'ResolvedDisputeByRejectingClaim(uint256,address,address)': EventFragment;
    'SetApi3Pool(address)': EventFragment;
    'SetApi3ToUsdReader(address)': EventFragment;
    'SetArbitratorResponsePeriod(address,uint256,address)': EventFragment;
    'SetClaimantResponsePeriod(uint256)': EventFragment;
    'SetMediatorResponsePeriod(uint256)': EventFragment;
    'SetQuota(address,uint32,uint224,address)': EventFragment;
    'UpgradedPolicy(address,address,bytes32,uint256,uint256,uint256,string,string,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AcceptedClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AcceptedSettlement'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatedClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatedDispute'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatedPolicy'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposedSettlement'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ResetQuota'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ResolvedDisputeByAcceptingClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ResolvedDisputeByAcceptingSettlement'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ResolvedDisputeByRejectingClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetApi3Pool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetApi3ToUsdReader'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetArbitratorResponsePeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetClaimantResponsePeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMediatorResponsePeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetQuota'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpgradedPolicy'): EventFragment;
}

export interface AcceptedClaimEventObject {
  claimIndex: BigNumber;
  claimant: string;
  beneficiary: string;
  amountInApi3: BigNumber;
  sender: string;
}
export type AcceptedClaimEvent = TypedEvent<[BigNumber, string, string, BigNumber, string], AcceptedClaimEventObject>;

export type AcceptedClaimEventFilter = TypedEventFilter<AcceptedClaimEvent>;

export interface AcceptedSettlementEventObject {
  claimIndex: BigNumber;
  claimant: string;
  amountInApi3: BigNumber;
}
export type AcceptedSettlementEvent = TypedEvent<[BigNumber, string, BigNumber], AcceptedSettlementEventObject>;

export type AcceptedSettlementEventFilter = TypedEventFilter<AcceptedSettlementEvent>;

export interface CreatedClaimEventObject {
  claimIndex: BigNumber;
  claimant: string;
  policyHash: string;
  beneficiary: string;
  claimsAllowedFrom: BigNumber;
  policy: string;
  claimAmountInUsd: BigNumber;
  evidence: string;
  claimCreationTime: BigNumber;
}
export type CreatedClaimEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, string, BigNumber, string, BigNumber],
  CreatedClaimEventObject
>;

export type CreatedClaimEventFilter = TypedEventFilter<CreatedClaimEvent>;

export interface CreatedDisputeEventObject {
  claimIndex: BigNumber;
  claimant: string;
  arbitrator: string;
}
export type CreatedDisputeEvent = TypedEvent<[BigNumber, string, string], CreatedDisputeEventObject>;

export type CreatedDisputeEventFilter = TypedEventFilter<CreatedDisputeEvent>;

export interface CreatedPolicyEventObject {
  beneficiary: string;
  claimant: string;
  policyHash: string;
  coverageAmountInUsd: BigNumber;
  claimsAllowedFrom: BigNumber;
  claimsAllowedUntil: BigNumber;
  policy: string;
  metadata: string;
  sender: string;
}
export type CreatedPolicyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string, string, string],
  CreatedPolicyEventObject
>;

export type CreatedPolicyEventFilter = TypedEventFilter<CreatedPolicyEvent>;

export interface ProposedSettlementEventObject {
  claimIndex: BigNumber;
  claimant: string;
  amountInUsd: BigNumber;
  amountInApi3: BigNumber;
  sender: string;
}
export type ProposedSettlementEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  ProposedSettlementEventObject
>;

export type ProposedSettlementEventFilter = TypedEventFilter<ProposedSettlementEvent>;

export interface ResetQuotaEventObject {
  account: string;
  sender: string;
}
export type ResetQuotaEvent = TypedEvent<[string, string], ResetQuotaEventObject>;

export type ResetQuotaEventFilter = TypedEventFilter<ResetQuotaEvent>;

export interface ResolvedDisputeByAcceptingClaimEventObject {
  claimIndex: BigNumber;
  claimant: string;
  beneficiary: string;
  amountInApi3: BigNumber;
  arbitrator: string;
}
export type ResolvedDisputeByAcceptingClaimEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  ResolvedDisputeByAcceptingClaimEventObject
>;

export type ResolvedDisputeByAcceptingClaimEventFilter = TypedEventFilter<ResolvedDisputeByAcceptingClaimEvent>;

export interface ResolvedDisputeByAcceptingSettlementEventObject {
  claimIndex: BigNumber;
  claimant: string;
  beneficiary: string;
  amountInApi3: BigNumber;
  arbitrator: string;
}
export type ResolvedDisputeByAcceptingSettlementEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  ResolvedDisputeByAcceptingSettlementEventObject
>;

export type ResolvedDisputeByAcceptingSettlementEventFilter =
  TypedEventFilter<ResolvedDisputeByAcceptingSettlementEvent>;

export interface ResolvedDisputeByRejectingClaimEventObject {
  claimIndex: BigNumber;
  claimant: string;
  arbitrator: string;
}
export type ResolvedDisputeByRejectingClaimEvent = TypedEvent<
  [BigNumber, string, string],
  ResolvedDisputeByRejectingClaimEventObject
>;

export type ResolvedDisputeByRejectingClaimEventFilter = TypedEventFilter<ResolvedDisputeByRejectingClaimEvent>;

export interface SetApi3PoolEventObject {
  api3Pool: string;
}
export type SetApi3PoolEvent = TypedEvent<[string], SetApi3PoolEventObject>;

export type SetApi3PoolEventFilter = TypedEventFilter<SetApi3PoolEvent>;

export interface SetApi3ToUsdReaderEventObject {
  api3ToUsdReader: string;
}
export type SetApi3ToUsdReaderEvent = TypedEvent<[string], SetApi3ToUsdReaderEventObject>;

export type SetApi3ToUsdReaderEventFilter = TypedEventFilter<SetApi3ToUsdReaderEvent>;

export interface SetArbitratorResponsePeriodEventObject {
  arbitrator: string;
  arbitratorResponsePeriod: BigNumber;
  sender: string;
}
export type SetArbitratorResponsePeriodEvent = TypedEvent<
  [string, BigNumber, string],
  SetArbitratorResponsePeriodEventObject
>;

export type SetArbitratorResponsePeriodEventFilter = TypedEventFilter<SetArbitratorResponsePeriodEvent>;

export interface SetClaimantResponsePeriodEventObject {
  claimantResponsePeriod: BigNumber;
}
export type SetClaimantResponsePeriodEvent = TypedEvent<[BigNumber], SetClaimantResponsePeriodEventObject>;

export type SetClaimantResponsePeriodEventFilter = TypedEventFilter<SetClaimantResponsePeriodEvent>;

export interface SetMediatorResponsePeriodEventObject {
  mediatorResponsePeriod: BigNumber;
}
export type SetMediatorResponsePeriodEvent = TypedEvent<[BigNumber], SetMediatorResponsePeriodEventObject>;

export type SetMediatorResponsePeriodEventFilter = TypedEventFilter<SetMediatorResponsePeriodEvent>;

export interface SetQuotaEventObject {
  account: string;
  period: number;
  amountInApi3: BigNumber;
  sender: string;
}
export type SetQuotaEvent = TypedEvent<[string, number, BigNumber, string], SetQuotaEventObject>;

export type SetQuotaEventFilter = TypedEventFilter<SetQuotaEvent>;

export interface UpgradedPolicyEventObject {
  beneficiary: string;
  claimant: string;
  policyHash: string;
  coverageAmountInUsd: BigNumber;
  claimsAllowedFrom: BigNumber;
  claimsAllowedUntil: BigNumber;
  policy: string;
  metadata: string;
  sender: string;
}
export type UpgradedPolicyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string, string, string],
  UpgradedPolicyEventObject
>;

export type UpgradedPolicyEventFilter = TypedEventFilter<UpgradedPolicyEvent>;

export interface ClaimsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClaimsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptClaim(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptSettlement(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accessControlRegistry(overrides?: CallOverrides): Promise<[string]>;

    accountToAccumulatedQuotaUsageCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromTimestamp: number; value: BigNumber }>;

    accountToQuota(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { period: number; amountInApi3: BigNumber }>;

    adminRole(overrides?: CallOverrides): Promise<[string]>;

    adminRoleDescription(overrides?: CallOverrides): Promise<[string]>;

    api3Pool(overrides?: CallOverrides): Promise<[string]>;

    api3ToUsdReader(overrides?: CallOverrides): Promise<[string]>;

    arbitratorRole(overrides?: CallOverrides): Promise<[string]>;

    arbitratorToResponsePeriod(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimIndexToArbitrator(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    claimIndexToProposedSettlementAmountInApi3(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimIndexToProposedSettlementAmountInUsd(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimantResponsePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    claims(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, string, number, BigNumber, string] & {
        policyHash: string;
        status: number;
        claimant: string;
        beneficiary: string;
        updateTime: number;
        amountInUsd: BigNumber;
        evidence: string;
      }
    >;

    createClaim(
      beneficiary: PromiseOrValue<string>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      claimAmountInUsd: PromiseOrValue<BigNumberish>,
      evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDispute(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPolicy(
      claimant: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      coverageAmountInUsd: PromiseOrValue<BigNumberish>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      claimsAllowedUntil: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getQuotaUsage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    isManagerOrMediator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    mediatorResponsePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    mediatorRole(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyCreatorRole(overrides?: CallOverrides): Promise<[string]>;

    policyHashToState(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & {
        claimsAllowedUntil: number;
        coverageAmountInUsd: BigNumber;
      }
    >;

    proposeSettlement(
      claimIndex: PromiseOrValue<BigNumberish>,
      amountInUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetQuota(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveDispute(
      claimIndex: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApi3Pool(
      _api3Pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApi3ToUsdReader(
      _api3ToUsdReader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArbitratorResponsePeriod(
      arbitrator: PromiseOrValue<string>,
      arbitratorResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimantResponsePeriod(
      _claimantResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMediatorResponsePeriod(
      _mediatorResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuota(
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      amountInApi3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradePolicy(
      claimant: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      coverageAmountInUsd: PromiseOrValue<BigNumberish>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      claimsAllowedUntil: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptClaim(
    claimIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptSettlement(
    claimIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accessControlRegistry(overrides?: CallOverrides): Promise<string>;

  accountToAccumulatedQuotaUsageCheckpoints(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { fromTimestamp: number; value: BigNumber }>;

  accountToQuota(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { period: number; amountInApi3: BigNumber }>;

  adminRole(overrides?: CallOverrides): Promise<string>;

  adminRoleDescription(overrides?: CallOverrides): Promise<string>;

  api3Pool(overrides?: CallOverrides): Promise<string>;

  api3ToUsdReader(overrides?: CallOverrides): Promise<string>;

  arbitratorRole(overrides?: CallOverrides): Promise<string>;

  arbitratorToResponsePeriod(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  claimCount(overrides?: CallOverrides): Promise<BigNumber>;

  claimIndexToArbitrator(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  claimIndexToProposedSettlementAmountInApi3(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimIndexToProposedSettlementAmountInUsd(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimantResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  claims(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, string, number, BigNumber, string] & {
      policyHash: string;
      status: number;
      claimant: string;
      beneficiary: string;
      updateTime: number;
      amountInUsd: BigNumber;
      evidence: string;
    }
  >;

  createClaim(
    beneficiary: PromiseOrValue<string>,
    claimsAllowedFrom: PromiseOrValue<BigNumberish>,
    policy: PromiseOrValue<string>,
    claimAmountInUsd: PromiseOrValue<BigNumberish>,
    evidence: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDispute(
    claimIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPolicy(
    claimant: PromiseOrValue<string>,
    beneficiary: PromiseOrValue<string>,
    coverageAmountInUsd: PromiseOrValue<BigNumberish>,
    claimsAllowedFrom: PromiseOrValue<BigNumberish>,
    claimsAllowedUntil: PromiseOrValue<BigNumberish>,
    policy: PromiseOrValue<string>,
    metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getQuotaUsage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  isManagerOrMediator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  manager(overrides?: CallOverrides): Promise<string>;

  mediatorResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  mediatorRole(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyCreatorRole(overrides?: CallOverrides): Promise<string>;

  policyHashToState(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & {
      claimsAllowedUntil: number;
      coverageAmountInUsd: BigNumber;
    }
  >;

  proposeSettlement(
    claimIndex: PromiseOrValue<BigNumberish>,
    amountInUsd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetQuota(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveDispute(
    claimIndex: PromiseOrValue<BigNumberish>,
    result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApi3Pool(
    _api3Pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApi3ToUsdReader(
    _api3ToUsdReader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArbitratorResponsePeriod(
    arbitrator: PromiseOrValue<string>,
    arbitratorResponsePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimantResponsePeriod(
    _claimantResponsePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMediatorResponsePeriod(
    _mediatorResponsePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuota(
    account: PromiseOrValue<string>,
    period: PromiseOrValue<BigNumberish>,
    amountInApi3: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradePolicy(
    claimant: PromiseOrValue<string>,
    beneficiary: PromiseOrValue<string>,
    coverageAmountInUsd: PromiseOrValue<BigNumberish>,
    claimsAllowedFrom: PromiseOrValue<BigNumberish>,
    claimsAllowedUntil: PromiseOrValue<BigNumberish>,
    policy: PromiseOrValue<string>,
    metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptClaim(claimIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    acceptSettlement(claimIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    accessControlRegistry(overrides?: CallOverrides): Promise<string>;

    accountToAccumulatedQuotaUsageCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromTimestamp: number; value: BigNumber }>;

    accountToQuota(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { period: number; amountInApi3: BigNumber }>;

    adminRole(overrides?: CallOverrides): Promise<string>;

    adminRoleDescription(overrides?: CallOverrides): Promise<string>;

    api3Pool(overrides?: CallOverrides): Promise<string>;

    api3ToUsdReader(overrides?: CallOverrides): Promise<string>;

    arbitratorRole(overrides?: CallOverrides): Promise<string>;

    arbitratorToResponsePeriod(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimCount(overrides?: CallOverrides): Promise<BigNumber>;

    claimIndexToArbitrator(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    claimIndexToProposedSettlementAmountInApi3(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimIndexToProposedSettlementAmountInUsd(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimantResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    claims(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, string, number, BigNumber, string] & {
        policyHash: string;
        status: number;
        claimant: string;
        beneficiary: string;
        updateTime: number;
        amountInUsd: BigNumber;
        evidence: string;
      }
    >;

    createClaim(
      beneficiary: PromiseOrValue<string>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      claimAmountInUsd: PromiseOrValue<BigNumberish>,
      evidence: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDispute(claimIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    createPolicy(
      claimant: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      coverageAmountInUsd: PromiseOrValue<BigNumberish>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      claimsAllowedUntil: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getQuotaUsage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isManagerOrMediator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    mediatorResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    mediatorRole(overrides?: CallOverrides): Promise<string>;

    multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;

    policyCreatorRole(overrides?: CallOverrides): Promise<string>;

    policyHashToState(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & {
        claimsAllowedUntil: number;
        coverageAmountInUsd: BigNumber;
      }
    >;

    proposeSettlement(
      claimIndex: PromiseOrValue<BigNumberish>,
      amountInUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetQuota(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    resolveDispute(
      claimIndex: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApi3Pool(_api3Pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setApi3ToUsdReader(_api3ToUsdReader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setArbitratorResponsePeriod(
      arbitrator: PromiseOrValue<string>,
      arbitratorResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimantResponsePeriod(
      _claimantResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMediatorResponsePeriod(
      _mediatorResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuota(
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      amountInApi3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradePolicy(
      claimant: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      coverageAmountInUsd: PromiseOrValue<BigNumberish>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      claimsAllowedUntil: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    'AcceptedClaim(uint256,address,address,uint256,address)'(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      beneficiary?: null,
      amountInApi3?: null,
      sender?: null
    ): AcceptedClaimEventFilter;
    AcceptedClaim(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      beneficiary?: null,
      amountInApi3?: null,
      sender?: null
    ): AcceptedClaimEventFilter;

    'AcceptedSettlement(uint256,address,uint256)'(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      amountInApi3?: null
    ): AcceptedSettlementEventFilter;
    AcceptedSettlement(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      amountInApi3?: null
    ): AcceptedSettlementEventFilter;

    'CreatedClaim(uint256,address,bytes32,address,uint256,string,uint256,string,uint256)'(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      policyHash?: PromiseOrValue<BytesLike> | null,
      beneficiary?: null,
      claimsAllowedFrom?: null,
      policy?: null,
      claimAmountInUsd?: null,
      evidence?: null,
      claimCreationTime?: null
    ): CreatedClaimEventFilter;
    CreatedClaim(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      policyHash?: PromiseOrValue<BytesLike> | null,
      beneficiary?: null,
      claimsAllowedFrom?: null,
      policy?: null,
      claimAmountInUsd?: null,
      evidence?: null,
      claimCreationTime?: null
    ): CreatedClaimEventFilter;

    'CreatedDispute(uint256,address,address)'(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      arbitrator?: null
    ): CreatedDisputeEventFilter;
    CreatedDispute(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      arbitrator?: null
    ): CreatedDisputeEventFilter;

    'CreatedPolicy(address,address,bytes32,uint256,uint256,uint256,string,string,address)'(
      beneficiary?: null,
      claimant?: PromiseOrValue<string> | null,
      policyHash?: PromiseOrValue<BytesLike> | null,
      coverageAmountInUsd?: null,
      claimsAllowedFrom?: null,
      claimsAllowedUntil?: null,
      policy?: null,
      metadata?: null,
      sender?: null
    ): CreatedPolicyEventFilter;
    CreatedPolicy(
      beneficiary?: null,
      claimant?: PromiseOrValue<string> | null,
      policyHash?: PromiseOrValue<BytesLike> | null,
      coverageAmountInUsd?: null,
      claimsAllowedFrom?: null,
      claimsAllowedUntil?: null,
      policy?: null,
      metadata?: null,
      sender?: null
    ): CreatedPolicyEventFilter;

    'ProposedSettlement(uint256,address,uint256,uint256,address)'(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      amountInUsd?: null,
      amountInApi3?: null,
      sender?: null
    ): ProposedSettlementEventFilter;
    ProposedSettlement(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      amountInUsd?: null,
      amountInApi3?: null,
      sender?: null
    ): ProposedSettlementEventFilter;

    'ResetQuota(address,address)'(account?: PromiseOrValue<string> | null, sender?: null): ResetQuotaEventFilter;
    ResetQuota(account?: PromiseOrValue<string> | null, sender?: null): ResetQuotaEventFilter;

    'ResolvedDisputeByAcceptingClaim(uint256,address,address,uint256,address)'(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      beneficiary?: null,
      amountInApi3?: null,
      arbitrator?: null
    ): ResolvedDisputeByAcceptingClaimEventFilter;
    ResolvedDisputeByAcceptingClaim(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      beneficiary?: null,
      amountInApi3?: null,
      arbitrator?: null
    ): ResolvedDisputeByAcceptingClaimEventFilter;

    'ResolvedDisputeByAcceptingSettlement(uint256,address,address,uint256,address)'(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      beneficiary?: null,
      amountInApi3?: null,
      arbitrator?: null
    ): ResolvedDisputeByAcceptingSettlementEventFilter;
    ResolvedDisputeByAcceptingSettlement(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      beneficiary?: null,
      amountInApi3?: null,
      arbitrator?: null
    ): ResolvedDisputeByAcceptingSettlementEventFilter;

    'ResolvedDisputeByRejectingClaim(uint256,address,address)'(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      arbitrator?: null
    ): ResolvedDisputeByRejectingClaimEventFilter;
    ResolvedDisputeByRejectingClaim(
      claimIndex?: PromiseOrValue<BigNumberish> | null,
      claimant?: PromiseOrValue<string> | null,
      arbitrator?: null
    ): ResolvedDisputeByRejectingClaimEventFilter;

    'SetApi3Pool(address)'(api3Pool?: null): SetApi3PoolEventFilter;
    SetApi3Pool(api3Pool?: null): SetApi3PoolEventFilter;

    'SetApi3ToUsdReader(address)'(api3ToUsdReader?: null): SetApi3ToUsdReaderEventFilter;
    SetApi3ToUsdReader(api3ToUsdReader?: null): SetApi3ToUsdReaderEventFilter;

    'SetArbitratorResponsePeriod(address,uint256,address)'(
      arbitrator?: PromiseOrValue<string> | null,
      arbitratorResponsePeriod?: null,
      sender?: null
    ): SetArbitratorResponsePeriodEventFilter;
    SetArbitratorResponsePeriod(
      arbitrator?: PromiseOrValue<string> | null,
      arbitratorResponsePeriod?: null,
      sender?: null
    ): SetArbitratorResponsePeriodEventFilter;

    'SetClaimantResponsePeriod(uint256)'(claimantResponsePeriod?: null): SetClaimantResponsePeriodEventFilter;
    SetClaimantResponsePeriod(claimantResponsePeriod?: null): SetClaimantResponsePeriodEventFilter;

    'SetMediatorResponsePeriod(uint256)'(mediatorResponsePeriod?: null): SetMediatorResponsePeriodEventFilter;
    SetMediatorResponsePeriod(mediatorResponsePeriod?: null): SetMediatorResponsePeriodEventFilter;

    'SetQuota(address,uint32,uint224,address)'(
      account?: PromiseOrValue<string> | null,
      period?: null,
      amountInApi3?: null,
      sender?: null
    ): SetQuotaEventFilter;
    SetQuota(
      account?: PromiseOrValue<string> | null,
      period?: null,
      amountInApi3?: null,
      sender?: null
    ): SetQuotaEventFilter;

    'UpgradedPolicy(address,address,bytes32,uint256,uint256,uint256,string,string,address)'(
      beneficiary?: null,
      claimant?: PromiseOrValue<string> | null,
      policyHash?: PromiseOrValue<BytesLike> | null,
      coverageAmountInUsd?: null,
      claimsAllowedFrom?: null,
      claimsAllowedUntil?: null,
      policy?: null,
      metadata?: null,
      sender?: null
    ): UpgradedPolicyEventFilter;
    UpgradedPolicy(
      beneficiary?: null,
      claimant?: PromiseOrValue<string> | null,
      policyHash?: PromiseOrValue<BytesLike> | null,
      coverageAmountInUsd?: null,
      claimsAllowedFrom?: null,
      claimsAllowedUntil?: null,
      policy?: null,
      metadata?: null,
      sender?: null
    ): UpgradedPolicyEventFilter;
  };

  estimateGas: {
    acceptClaim(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptSettlement(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accessControlRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    accountToAccumulatedQuotaUsageCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountToQuota(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    adminRole(overrides?: CallOverrides): Promise<BigNumber>;

    adminRoleDescription(overrides?: CallOverrides): Promise<BigNumber>;

    api3Pool(overrides?: CallOverrides): Promise<BigNumber>;

    api3ToUsdReader(overrides?: CallOverrides): Promise<BigNumber>;

    arbitratorRole(overrides?: CallOverrides): Promise<BigNumber>;

    arbitratorToResponsePeriod(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimCount(overrides?: CallOverrides): Promise<BigNumber>;

    claimIndexToArbitrator(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    claimIndexToProposedSettlementAmountInApi3(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimIndexToProposedSettlementAmountInUsd(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimantResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    claims(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    createClaim(
      beneficiary: PromiseOrValue<string>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      claimAmountInUsd: PromiseOrValue<BigNumberish>,
      evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDispute(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPolicy(
      claimant: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      coverageAmountInUsd: PromiseOrValue<BigNumberish>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      claimsAllowedUntil: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getQuotaUsage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isManagerOrMediator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    mediatorResponsePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    mediatorRole(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyCreatorRole(overrides?: CallOverrides): Promise<BigNumber>;

    policyHashToState(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    proposeSettlement(
      claimIndex: PromiseOrValue<BigNumberish>,
      amountInUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetQuota(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveDispute(
      claimIndex: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApi3Pool(
      _api3Pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApi3ToUsdReader(
      _api3ToUsdReader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArbitratorResponsePeriod(
      arbitrator: PromiseOrValue<string>,
      arbitratorResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimantResponsePeriod(
      _claimantResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMediatorResponsePeriod(
      _mediatorResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuota(
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      amountInApi3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradePolicy(
      claimant: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      coverageAmountInUsd: PromiseOrValue<BigNumberish>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      claimsAllowedUntil: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptClaim(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptSettlement(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accessControlRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountToAccumulatedQuotaUsageCheckpoints(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountToQuota(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminRoleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    api3Pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    api3ToUsdReader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitratorRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitratorToResponsePeriod(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimIndexToArbitrator(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimIndexToProposedSettlementAmountInApi3(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimIndexToProposedSettlementAmountInUsd(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimantResponsePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claims(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createClaim(
      beneficiary: PromiseOrValue<string>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      claimAmountInUsd: PromiseOrValue<BigNumberish>,
      evidence: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDispute(
      claimIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPolicy(
      claimant: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      coverageAmountInUsd: PromiseOrValue<BigNumberish>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      claimsAllowedUntil: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getQuotaUsage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isManagerOrMediator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mediatorResponsePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mediatorRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyCreatorRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyHashToState(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeSettlement(
      claimIndex: PromiseOrValue<BigNumberish>,
      amountInUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetQuota(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveDispute(
      claimIndex: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApi3Pool(
      _api3Pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApi3ToUsdReader(
      _api3ToUsdReader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArbitratorResponsePeriod(
      arbitrator: PromiseOrValue<string>,
      arbitratorResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimantResponsePeriod(
      _claimantResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMediatorResponsePeriod(
      _mediatorResponsePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuota(
      account: PromiseOrValue<string>,
      period: PromiseOrValue<BigNumberish>,
      amountInApi3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradePolicy(
      claimant: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      coverageAmountInUsd: PromiseOrValue<BigNumberish>,
      claimsAllowedFrom: PromiseOrValue<BigNumberish>,
      claimsAllowedUntil: PromiseOrValue<BigNumberish>,
      policy: PromiseOrValue<string>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "api3TokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "DepositedVesting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaidOutClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "name": "PaidReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "votingApp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "specsUrl",
          "type": "string"
        }
      ],
      "name": "PublishedSpecsUrl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheduledFor",
          "type": "uint256"
        }
      ],
      "name": "ScheduledUnstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAprUpdateStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aprUpdateStep",
          "type": "uint256"
        }
      ],
      "name": "SetAprUpdateStep",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimsManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetClaimsManagerStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentAppPrimary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentAppSecondary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "votingAppPrimary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "votingAppSecondary",
          "type": "address"
        }
      ],
      "name": "SetDaoApps",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxApr",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxApr",
          "type": "uint256"
        }
      ],
      "name": "SetMaxApr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinApr",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minApr",
          "type": "uint256"
        }
      ],
      "name": "SetMinApr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProposalVotingPowerThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalVotingPowerThreshold",
          "type": "uint256"
        }
      ],
      "name": "SetProposalVotingPowerThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTarget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTarget",
          "type": "uint256"
        }
      ],
      "name": "SetStakeTarget",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldUnstakeWaitPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeWaitPeriod",
          "type": "uint256"
        }
      ],
      "name": "SetUnstakeWaitPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "votingApp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastVoteSnapshotBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastVoteSnapshotBlockUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdatedLastVoteSnapshotBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "timelockManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdatedTimelock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EPOCH_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_VESTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentAppPrimary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentAppSecondary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "api3Token",
      "outputs": [
        {
          "internalType": "contract IApi3Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aprUpdateStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimsManagerStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "delegateVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "releaseStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseEnd",
          "type": "uint256"
        }
      ],
      "name": "depositWithVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochIndexOfLastRewardPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochIndexToReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "atBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSharesThen",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "getReceivedDelegationAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unstaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vesting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeScheduledFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mostRecentProposalTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mostRecentVoteTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mostRecentDelegationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mostRecentUndelegationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserDelegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "getUserDelegateAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payOutClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalVotingPowerThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "scheduleUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aprUpdateStep",
          "type": "uint256"
        }
      ],
      "name": "setAprUpdateStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimsManager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setClaimsManagerStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agentAppPrimary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agentAppSecondary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingAppPrimary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingAppSecondary",
          "type": "address"
        }
      ],
      "name": "setDaoApps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxApr",
          "type": "uint256"
        }
      ],
      "name": "setMaxApr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minApr",
          "type": "uint256"
        }
      ],
      "name": "setMinApr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalVotingPowerThreshold",
          "type": "uint256"
        }
      ],
      "name": "setProposalVotingPowerThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeTarget",
          "type": "uint256"
        }
      ],
      "name": "setStakeTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakeWaitPeriod",
          "type": "uint256"
        }
      ],
      "name": "setUnstakeWaitPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyOneBlockAgo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "undelegateVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "unstakeAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeWaitPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "snapshotBlock",
          "type": "uint256"
        }
      ],
      "name": "updateLastVoteSnapshotBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "updateMostRecentProposalTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "updateMostRecentVoteTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "timelockManagerAddress",
          "type": "address"
        }
      ],
      "name": "updateTimelockStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "userReceivedDelegation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "userShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "userSharesAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "userSharesAtWithBinarySearch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "userStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToDepositorToTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unstaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vesting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeScheduledFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mostRecentProposalTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mostRecentVoteTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mostRecentDelegationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mostRecentUndelegationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingAppPrimary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingAppSecondary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3eb8a3d5001d3a1d261f747cf9be9fe684d67e81fb1c6418f47226f2ad13cec",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3642641",
    "logsBloom": "0x
    "blockHash": "0x9985abdee1aa027acdc70967e7ed2ebf7307a678678e88430139ce266038ee71",
    "transactionHash": "0xe3eb8a3d5001d3a1d261f747cf9be9fe684d67e81fb1c6418f47226f2ad13cec",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3642641",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "solcInputHash": "90bfa6284afca258e6bf638c34f6e3e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3TokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"DepositedVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidOutClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"PaidReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingApp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"specsUrl\",\"type\":\"string\"}],\"name\":\"PublishedSpecsUrl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduledFor\",\"type\":\"uint256\"}],\"name\":\"ScheduledUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAprUpdateStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aprUpdateStep\",\"type\":\"uint256\"}],\"name\":\"SetAprUpdateStep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimsManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetClaimsManagerStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentAppPrimary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentAppSecondary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingAppPrimary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingAppSecondary\",\"type\":\"address\"}],\"name\":\"SetDaoApps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxApr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxApr\",\"type\":\"uint256\"}],\"name\":\"SetMaxApr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinApr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minApr\",\"type\":\"uint256\"}],\"name\":\"SetMinApr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalVotingPowerThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalVotingPowerThreshold\",\"type\":\"uint256\"}],\"name\":\"SetProposalVotingPowerThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTarget\",\"type\":\"uint256\"}],\"name\":\"SetStakeTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUnstakeWaitPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeWaitPeriod\",\"type\":\"uint256\"}],\"name\":\"SetUnstakeWaitPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingApp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastVoteSnapshotBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastVoteSnapshotBlockUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"UpdatedLastVoteSnapshotBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"timelockManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedTimelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_VESTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentAppPrimary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentAppSecondary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"contract IApi3Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aprUpdateStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimsManagerStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"delegateVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"name\":\"depositWithVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochIndexOfLastRewardPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochIndexToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSharesThen\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getReceivedDelegationAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeScheduledFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mostRecentProposalTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mostRecentVoteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mostRecentDelegationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mostRecentUndelegationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getUserDelegateAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOutClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalVotingPowerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"scheduleUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aprUpdateStep\",\"type\":\"uint256\"}],\"name\":\"setAprUpdateStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimsManager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setClaimsManagerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentAppPrimary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agentAppSecondary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingAppPrimary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingAppSecondary\",\"type\":\"address\"}],\"name\":\"setDaoApps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxApr\",\"type\":\"uint256\"}],\"name\":\"setMaxApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minApr\",\"type\":\"uint256\"}],\"name\":\"setMinApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalVotingPowerThreshold\",\"type\":\"uint256\"}],\"name\":\"setProposalVotingPowerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeTarget\",\"type\":\"uint256\"}],\"name\":\"setStakeTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeWaitPeriod\",\"type\":\"uint256\"}],\"name\":\"setUnstakeWaitPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOneBlockAgo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegateVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"unstakeAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeWaitPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"updateLastVoteSnapshotBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"updateMostRecentProposalTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"updateMostRecentVoteTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelockManagerAddress\",\"type\":\"address\"}],\"name\":\"updateTimelockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userReceivedDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"userSharesAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"userSharesAtWithBinarySearch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToDepositorToTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeScheduledFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mostRecentProposalTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mostRecentVoteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mostRecentDelegationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mostRecentUndelegationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingAppPrimary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingAppSecondary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Functionalities of the contract are distributed to files that form a chain of inheritance: (1) Api3Pool.sol (2) TimelockUtils.sol (3) ClaimUtils.sol (4) StakeUtils.sol (5) TransferUtils.sol (6) DelegationUtils.sol (7) RewardUtils.sol (8) GetterUtils.sol (9) StateUtils.sol\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"This method is used to implement the MiniMe interface for the Api3Voting app\",\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current voting power of the user\"}},\"balanceOfAt(address,uint256)\":{\"details\":\"This method is used to implement the MiniMe interface for the Api3Voting app\",\"params\":{\"_block\":\"Block number for which the query is being made for\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Voting power of the user at the block\"}},\"constructor\":{\"params\":{\"api3TokenAddress\":\"API3 token contract address\"}},\"delegateVotingPower(address)\":{\"params\":{\"delegate\":\"User address the voting power will be delegated to\"}},\"deposit(address,uint256,address)\":{\"details\":\"This method is used by `TimelockManager.sol`\",\"params\":{\"amount\":\"Amount to be deposited\",\"source\":\"Token transfer source\",\"userAddress\":\"User that the tokens will be deposited for\"}},\"depositAndStake(address,uint256)\":{\"details\":\"Due to the `deposit()` interface, `userAddress` can only be the caller\",\"params\":{\"amount\":\"Amount to be deposited and staked\",\"source\":\"Token transfer source\"}},\"depositWithVesting(address,uint256,address,uint256,uint256)\":{\"details\":\"Refer to `TimelockManager.sol` to see how this is used\",\"params\":{\"amount\":\"Token amount\",\"releaseEnd\":\"Vesting schedule ending time\",\"releaseStart\":\"Vesting schedule starting time\",\"source\":\"Token source\",\"userAddress\":\"Address of the user who will receive the tokens\"}},\"getReceivedDelegationAt(address,uint256)\":{\"details\":\"`user.delegatedTo` cannot have grown more than 1000 checkpoints in the last epoch due to `proposalVotingPowerThreshold` having a lower limit of 0.1%.\",\"params\":{\"_block\":\"Block number for which the query is being made for\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Voting power delegated to the user at the block\"}},\"getUser(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"mostRecentDelegationTimestamp\":\"Time when the user made their most recent delegation\",\"mostRecentProposalTimestamp\":\"Time when the user made their most recent proposal\",\"mostRecentUndelegationTimestamp\":\"Time when the user made their most recent undelegation\",\"mostRecentVoteTimestamp\":\"Time when the user cast their most recent vote\",\"unstakeAmount\":\"Amount scheduled to unstake\",\"unstakeScheduledFor\":\"Time unstaking is scheduled for\",\"unstakeShares\":\"Shares scheduled to unstake\",\"unstaked\":\"Amount of unstaked API3 tokens\",\"vesting\":\"Amount of API3 tokens locked by vesting\"}},\"getUserDelegate(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current delegate of the user\"}},\"getUserDelegateAt(address,uint256)\":{\"details\":\"Starts from the most recent value in `user.delegates` and searches backwards one element at a time. If `_block` is within `EPOCH_LENGTH`, this call is guaranteed to find the value among the last 2 elements because a user cannot update delegate more frequently than once an `EPOCH_LENGTH`.\",\"params\":{\"_block\":\"Block number\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Delegate of the user at the specific block\"}},\"getUserLocked(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"locked\":\"Current locked tokens of the user\"}},\"payOutClaim(address,uint256)\":{\"details\":\"The claims manager is a trusted contract that is allowed to withdraw as many tokens as it wants from the pool to pay out insurance claims. Any kind of limiting logic (e.g., maximum amount of tokens that can be withdrawn) is implemented at its end and is out of the scope of this contract. This will revert if the pool does not have enough funds.\",\"params\":{\"amount\":\"Amount of tokens that will be paid out\",\"recipient\":\"Recipient of the claim\"}},\"payReward()\":{\"details\":\"Skips past epochs for which rewards have not been paid for. Skips the reward payment if the pool is not authorized to mint tokens. Neither of these conditions will occur in practice.\"},\"scheduleUnstake(uint256)\":{\"details\":\"While scheduling an unstake, `shares` get deducted from the user, meaning that they will not receive rewards or voting power for them any longer. At unstaking-time, the user unstakes either the amount of tokens `shares` corresponds to at scheduling-time, or the amount of tokens `shares` corresponds to at unstaking-time, whichever is smaller. This corresponds to tokens being scheduled to be unstaked not receiving any rewards, but being subject to claim payouts. In the instance that a claim has been paid out before an unstaking is executed, the user may potentially receive rewards during `unstakeWaitPeriod` (but not if there has not been a claim payout) but the amount of tokens that they can unstake will not be able to exceed the amount they scheduled the unstaking for.\",\"params\":{\"shares\":\"Amount of shares to be burned to unstake tokens\"}},\"setAprUpdateStep(uint256)\":{\"details\":\"aprUpdateStep can be 0% or 100%+\",\"params\":{\"_aprUpdateStep\":\"APR update steps\"}},\"setClaimsManagerStatus(address,bool)\":{\"details\":\"The claims manager is a trusted contract that is allowed to withdraw as many tokens as it wants from the pool to pay out insurance claims. Only the primary Agent can do this because it is a critical operation.\",\"params\":{\"claimsManager\":\"Claims manager contract address\",\"status\":\"Authorization status\"}},\"setDaoApps(address,address,address,address)\":{\"details\":\"This can also be called later on by the primary Agent to update all app addresses as a means of upgrade\",\"params\":{\"_agentAppPrimary\":\"Address of the primary Agent\",\"_agentAppSecondary\":\"Address of the secondary Agent\",\"_votingAppPrimary\":\"Address of the primary Api3Voting\",\"_votingAppSecondary\":\"Address of the secondary Api3Voting\"}},\"setMaxApr(uint256)\":{\"params\":{\"_maxApr\":\"Maximum APR\"}},\"setMinApr(uint256)\":{\"params\":{\"_minApr\":\"Minimum APR\"}},\"setProposalVotingPowerThreshold(uint256)\":{\"details\":\"Proposal voting power is limited between 0.1% and 10%. 0.1% is to ensure that no more than 1000 proposals can be made within an epoch (see `getReceivedDelegationAt()`) and any value above 10% is certainly an error.\",\"params\":{\"_proposalVotingPowerThreshold\":\"Voting power threshold for proposals\"}},\"setStakeTarget(uint256)\":{\"params\":{\"_stakeTarget\":\"Stake target\"}},\"setUnstakeWaitPeriod(uint256)\":{\"details\":\"This may want to be increased to provide more time for insurance claims to be resolved. Even when the insurance functionality is not implemented, the minimum valid value is `EPOCH_LENGTH` to prevent users from unstaking, withdrawing and staking with another address to work around the proposal spam protection. Only the primary Agent can do this because it is a critical operation.\",\"params\":{\"_unstakeWaitPeriod\":\"Unstake waiting period\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to stake\"}},\"totalSupply()\":{\"details\":\"This method is used to implement the MiniMe interface for the Aragon Voting app\",\"returns\":{\"_0\":\"Current total voting power\"}},\"totalSupplyOneBlockAgo()\":{\"details\":\"This method is used to implement the MiniMe interface for the Api3Voting app\",\"returns\":{\"_0\":\"Total voting power one block ago\"}},\"unstake(address)\":{\"details\":\"Anyone can execute a mature scheduled unstake\",\"params\":{\"userAddress\":\"Address of the user whose scheduled unstaking will be executed\"},\"returns\":{\"_0\":\"Amount of tokens that are unstaked\"}},\"unstakeAndWithdraw(address)\":{\"details\":\"Note that withdraw may revert because the user may have less than `unstaked` tokens that are withdrawable\",\"params\":{\"destination\":\"Token transfer destination\"}},\"updateLastVoteSnapshotBlock(uint256)\":{\"params\":{\"snapshotBlock\":\"Last vote snapshot block number\"}},\"updateMostRecentProposalTimestamp(address)\":{\"params\":{\"userAddress\":\"User address\"}},\"updateMostRecentVoteTimestamp(address)\":{\"params\":{\"userAddress\":\"User address\"}},\"updateTimelockStatus(address,address)\":{\"params\":{\"timelockManagerAddress\":\"Address of the TimelockManager that has created the timelock\",\"userAddress\":\"Address of the user whose timelock status will be updated\"}},\"userReceivedDelegation(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current voting power delegated to the user\"}},\"userShares(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current pool shares of the user\"}},\"userSharesAt(address,uint256)\":{\"details\":\"Starts from the most recent value in `user.shares` and searches backwards one element at a time\",\"params\":{\"_block\":\"Block number for which the query is being made for\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Pool shares of the user at the block\"}},\"userSharesAtWithBinarySearch(address,uint256)\":{\"details\":\"This method is not used by the current iteration of the DAO/pool and is implemented for future external contracts to use to get the user shares at an arbitrary block.\",\"params\":{\"_block\":\"Block number for which the query is being made for\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Pool shares of the user at the block\"}},\"userStake(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current staked tokens of the user\"}},\"withdraw(address,uint256)\":{\"details\":\"The user should call `getUserLocked()` beforehand to ensure that they have at least `amount` unlocked tokens to withdraw\",\"params\":{\"amount\":\"Amount to be withdrawn\",\"destination\":\"Token transfer destination\"}}},\"title\":\"API3 pool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"EPOCH_LENGTH()\":{\"notice\":\"Length of the epoch in which the staking reward is paid out once. It is hardcoded as 7 days in seconds.\"},\"REWARD_VESTING_PERIOD()\":{\"notice\":\"Number of epochs before the staking rewards get unlocked. Hardcoded as 52 epochs, which corresponds to a year.\"},\"agentAppPrimary()\":{\"notice\":\"Address of the primary Agent app of the API3 DAO\"},\"agentAppSecondary()\":{\"notice\":\"Address of the secondary Agent app of the API3 DAO\"},\"api3Token()\":{\"notice\":\"API3 token contract\"},\"aprUpdateStep()\":{\"notice\":\"Steps in which APR will be updated in percentages\"},\"balanceOf(address)\":{\"notice\":\"Called to get the current voting power of a user\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Called to get the voting power of a user at a checkpoint, closest to the provided block\"},\"claimsManagerStatus(address)\":{\"notice\":\"Mapping that keeps the claims manager statuses of addresses\"},\"currentApr()\":{\"notice\":\"APR that will be paid next epoch\"},\"delegateVotingPower(address)\":{\"notice\":\"Called by the user to delegate voting power\"},\"deposit(address,uint256,address)\":{\"notice\":\"Called to deposit tokens for a user by using `transferFrom()`\"},\"depositAndStake(address,uint256)\":{\"notice\":\"Convenience method to deposit and stake in a single transaction\"},\"depositWithVesting(address,uint256,address,uint256,uint256)\":{\"notice\":\"Called by TimelockManager contracts to deposit tokens on behalf of a user on a linear vesting schedule\"},\"epochIndexOfLastRewardPayment()\":{\"notice\":\"Epoch index of the most recent reward payment\"},\"epochIndexToReward(uint256)\":{\"notice\":\"Records of rewards paid in each epoch\"},\"genesisEpoch()\":{\"notice\":\"Epochs are indexed as `block.timestamp / EPOCH_LENGTH`. `genesisEpoch` is the index of the epoch in which the pool is deployed.\"},\"getReceivedDelegationAt(address,uint256)\":{\"notice\":\"Called to get the voting power delegated to a user at a checkpoint, closest to specific block\"},\"getUser(address)\":{\"notice\":\"Called to get the details of a user\"},\"getUserDelegate(address)\":{\"notice\":\"Called to get the current delegate of the user\"},\"getUserDelegateAt(address,uint256)\":{\"notice\":\"Called to get the delegate of the user at a checkpoint, closest to specified block\"},\"getUserLocked(address)\":{\"notice\":\"Called to get the current locked tokens of the user\"},\"maxApr()\":{\"notice\":\"Maximum APR (annual percentage rate) the pool will pay as staking rewards in percentages\"},\"minApr()\":{\"notice\":\"Minimum APR (annual percentage rate) the pool will pay as staking rewards in percentages\"},\"payOutClaim(address,uint256)\":{\"notice\":\"Called by a claims manager to pay out an insurance claim\"},\"payReward()\":{\"notice\":\"Called to pay the reward for the current epoch\"},\"proposalVotingPowerThreshold()\":{\"notice\":\"Minimum voting power the users must have to be able to make proposals (in percentages)\"},\"scheduleUnstake(uint256)\":{\"notice\":\"Called by the user to schedule unstaking of their tokens\"},\"setAprUpdateStep(uint256)\":{\"notice\":\"Called by the DAO Agent to set the APR update steps\"},\"setClaimsManagerStatus(address,bool)\":{\"notice\":\"Called by the DAO Agent to set the authorization status of a claims manager contract\"},\"setDaoApps(address,address,address,address)\":{\"notice\":\"Called after deployment to set the addresses of the DAO apps\"},\"setMaxApr(uint256)\":{\"notice\":\"Called by the DAO Agent to set the maximum APR\"},\"setMinApr(uint256)\":{\"notice\":\"Called by the DAO Agent to set the minimum APR\"},\"setProposalVotingPowerThreshold(uint256)\":{\"notice\":\"Called by the DAO Agent to set the voting power threshold for proposals Only the primary Agent can do this because it is a critical operation.\"},\"setStakeTarget(uint256)\":{\"notice\":\"Called by the DAO Agent to set the stake target\"},\"setUnstakeWaitPeriod(uint256)\":{\"notice\":\"Called by the DAO Agent to set the unstake waiting period\"},\"stake(uint256)\":{\"notice\":\"Called to stake tokens to receive pools in the share\"},\"stakeTarget()\":{\"notice\":\"Stake target the pool will aim to meet in percentages of the total token supply. The staking rewards increase if the total staked amount is below this, and vice versa.\"},\"totalStake()\":{\"notice\":\"Total number of tokens staked at the pool\"},\"totalSupply()\":{\"notice\":\"Called to get the current total voting power\"},\"totalSupplyOneBlockAgo()\":{\"notice\":\"Called to get the total voting power one block ago\"},\"undelegateVotingPower()\":{\"notice\":\"Called by the user to undelegate voting power\"},\"unstake(address)\":{\"notice\":\"Called to execute a pre-scheduled unstake\"},\"unstakeAndWithdraw(address)\":{\"notice\":\"Convenience method to execute an unstake and withdraw in a single transaction\"},\"unstakeWaitPeriod()\":{\"notice\":\"Users need to schedule an unstake and wait for `unstakeWaitPeriod` before being able to unstake. This is to prevent the stakers from frontrunning insurance claims by unstaking to evade them, or repeatedly unstake/stake to work around the proposal spam protection.\"},\"updateLastVoteSnapshotBlock(uint256)\":{\"notice\":\"Called by a DAO Api3Voting app to update the last vote snapshot block number\"},\"updateMostRecentProposalTimestamp(address)\":{\"notice\":\"Called by a DAO Api3Voting app at proposal creation-time to update the timestamp of the user's most recent proposal\"},\"updateMostRecentVoteTimestamp(address)\":{\"notice\":\"Called by a DAO Api3Voting app at voting-time to update the timestamp of the user's most recent vote\"},\"updateTimelockStatus(address,address)\":{\"notice\":\"Called to release tokens vested by the timelock\"},\"userReceivedDelegation(address)\":{\"notice\":\"Called to get the current voting power delegated to a user\"},\"userShares(address)\":{\"notice\":\"Called to get the current pool shares of a user\"},\"userSharesAt(address,uint256)\":{\"notice\":\"Called to get the pool shares of a user at a checkpoint, closest to the provided block\"},\"userSharesAtWithBinarySearch(address,uint256)\":{\"notice\":\"Called to get the pool shares of a user at checkpoint, closest to specific block using binary search\"},\"userStake(address)\":{\"notice\":\"Called to get the current staked tokens of the user\"},\"userToDepositorToTimelock(address,address)\":{\"notice\":\"Maps user addresses to TimelockManager contract addresses to timelocks\"},\"users(address)\":{\"notice\":\"User records\"},\"votingAppPrimary()\":{\"notice\":\"Address of the primary Api3Voting app of the API3 DAO\"},\"votingAppSecondary()\":{\"notice\":\"Address of the secondary Api3Voting app of the API3 DAO\"},\"withdraw(address,uint256)\":{\"notice\":\"Called to withdraw tokens\"}},\"notice\":\"Users can stake API3 tokens at the pool contract to be granted shares. These shares are exposed to the Aragon-based DAO with a pseudo-MiniMe token interface, giving the user voting power at the DAO. Staking pays out weekly rewards that get unlocked after a year, and staked funds are used to collateralize an insurance product that is outside the scope of this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool-contracts-symlink/Api3Pool.sol\":\"Api3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/pool-contracts-symlink/Api3Pool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./TimelockUtils.sol\\\";\\nimport \\\"./interfaces/IApi3Pool.sol\\\";\\n\\n/// @title API3 pool contract\\n/// @notice Users can stake API3 tokens at the pool contract to be granted\\n/// shares. These shares are exposed to the Aragon-based DAO with a\\n/// pseudo-MiniMe token interface, giving the user voting power at the DAO.\\n/// Staking pays out weekly rewards that get unlocked after a year, and staked\\n/// funds are used to collateralize an insurance product that is outside the\\n/// scope of this contract.\\n/// @dev Functionalities of the contract are distributed to files that form a\\n/// chain of inheritance:\\n/// (1) Api3Pool.sol\\n/// (2) TimelockUtils.sol\\n/// (3) ClaimUtils.sol\\n/// (4) StakeUtils.sol\\n/// (5) TransferUtils.sol\\n/// (6) DelegationUtils.sol\\n/// (7) RewardUtils.sol\\n/// (8) GetterUtils.sol\\n/// (9) StateUtils.sol\\ncontract Api3Pool is TimelockUtils, IApi3Pool {\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        StateUtils(api3TokenAddress)\\n    {}\\n}\\n\",\"keccak256\":\"0xc77c898aeac6d17d001763ba493b46786e80fa88203c6c978df0fa9a7e25a004\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/ClaimUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./StakeUtils.sol\\\";\\nimport \\\"./interfaces/IClaimUtils.sol\\\";\\n\\n/// @title Contract that implements the insurance claim payout functionality\\nabstract contract ClaimUtils is StakeUtils, IClaimUtils {\\n\\n\\n    string private constant ERROR_CLAIM_AMOUNT = \\\"API3DAO.ClaimUtils: Total stake should be bigger then claim amount\\\";\\n    string private constant ERROR_CLAIM_MANAGER = \\\"API3DAO.ClaimUtils: Only claim manager is allowed to perform this action\\\";\\n\\n    /// @dev Reverts if the caller is not a claims manager\\n    modifier onlyClaimsManager() {\\n        require(claimsManagerStatus[msg.sender], ERROR_CLAIM_MANAGER);\\n        _;\\n    }\\n\\n    /// @notice Called by a claims manager to pay out an insurance claim\\n    /// @dev The claims manager is a trusted contract that is allowed to\\n    /// withdraw as many tokens as it wants from the pool to pay out insurance\\n    /// claims. Any kind of limiting logic (e.g., maximum amount of tokens that\\n    /// can be withdrawn) is implemented at its end and is out of the scope of\\n    /// this contract.\\n    /// This will revert if the pool does not have enough funds.\\n    /// @param recipient Recipient of the claim\\n    /// @param amount Amount of tokens that will be paid out\\n    function payOutClaim(\\n        address recipient,\\n        uint256 amount\\n        )\\n        external\\n        override\\n        onlyClaimsManager()\\n    {\\n        payReward();\\n        // totalStake should not go lower than 1\\n        require(totalStake > amount, ERROR_CLAIM_AMOUNT);\\n        totalStake = totalStake - amount;\\n        api3Token.transfer(recipient, amount);\\n        emit PaidOutClaim(\\n            recipient,\\n            amount\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x956ad19c15c028d80a73a33d46c7a2beff0d38cfec995f39def09480a6ec7d80\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/DelegationUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./RewardUtils.sol\\\";\\nimport \\\"./interfaces/IDelegationUtils.sol\\\";\\n\\n/// @title Contract that implements voting power delegation\\nabstract contract DelegationUtils is RewardUtils, IDelegationUtils {\\n\\n    string internal constant ERROR_DELEGATION_BALANCE = \\\"API3DAO.DelegationUtils: Cannot delegate zero shares\\\";\\n    string internal constant ERROR_DELEGATION_ADRESSES =\\n    \\\"API3DAO.DelegationUtils: Cannot delegate to yourself or zero address and if you've already delegated\\\";\\n    string internal constant ERROR_DELEGATED_RECENTLY =\\n    \\\"API3DAO.DelegationUtils: This address un/delegated less than a week before\\\";\\n    string internal constant ERROR_ACTIVE_RECENTLY =\\n    \\\"API3DAO.DelegationUtils: This address voted or made a proposal less than a week before\\\";\\n    string internal constant ERROR_NOT_DELEGATED =\\n    \\\"API3DAO.DelegationUtils: This address has not delegated\\\";\\n\\n    /// @notice Called by the user to delegate voting power\\n    /// @param delegate User address the voting power will be delegated to\\n    function delegateVotingPower(address delegate)\\n        external\\n        override\\n    {\\n        payReward();\\n        // Delegating users cannot use their voting power, so we verify that\\n        // the delegate is not currently delegating. However,\\n        // the delegate may delegate after they have been delegated to.\\n        require(\\n            delegate != address(0)\\n                && delegate != msg.sender\\n                && getUserDelegate(delegate) == address(0),\\n                ERROR_DELEGATION_ADRESSES\\n            );\\n        User storage user = users[msg.sender];\\n        // Do not allow frequent delegation updates as that can be used to spam\\n        // proposals\\n        require(\\n            user.mostRecentDelegationTimestamp <= block.timestamp - EPOCH_LENGTH\\n                && user.mostRecentUndelegationTimestamp <= block.timestamp - EPOCH_LENGTH,\\n                ERROR_DELEGATED_RECENTLY\\n            );\\n        // Do not allow the user to delegate if they have voted or made a proposal\\n        // in the last epoch to prevent double voting\\n        require(\\n            user.mostRecentProposalTimestamp <= block.timestamp - EPOCH_LENGTH\\n                && user.mostRecentVoteTimestamp <= block.timestamp - EPOCH_LENGTH,\\n                ERROR_ACTIVE_RECENTLY\\n            );\\n        user.mostRecentDelegationTimestamp = block.timestamp;\\n        uint256 userShares = userShares(msg.sender);\\n        address userDelegate = getUserDelegate(msg.sender);\\n        require(userShares > 0, ERROR_DELEGATION_BALANCE );\\n        require(userDelegate != delegate, ERROR_DELEGATE);\\n\\n        if (userDelegate != address(0)) {\\n            // Revoke previous delegation\\n            updateCheckpointArray(\\n                users[userDelegate].delegatedTo,\\n                userReceivedDelegation(userDelegate) - userShares\\n                );\\n            emit Undelegated(\\n                msg.sender,\\n                userDelegate\\n            );\\n        }\\n        // Assign the new delegation\\n        User storage _delegate = users[delegate];\\n        updateCheckpointArray(\\n            _delegate.delegatedTo,\\n            userReceivedDelegation(delegate) + userShares\\n            );\\n        // Record the new delegate for the user\\n        updateAddressCheckpointArray(\\n            user.delegates,\\n            delegate\\n            );\\n        emit Delegated(\\n            msg.sender,\\n            delegate\\n            );\\n    }\\n\\n    /// @notice Called by the user to undelegate voting power\\n    function undelegateVotingPower()\\n        external\\n        override\\n    {\\n        payReward();\\n        User storage user = users[msg.sender];\\n        address userDelegate = getUserDelegate(msg.sender);\\n        require(userDelegate != address(0), ERROR_NOT_DELEGATED);\\n        // Do not allow frequent delegation updates as that can be used to spam\\n        // proposals\\n        require(\\n            user.mostRecentDelegationTimestamp <= block.timestamp - EPOCH_LENGTH\\n                && user.mostRecentUndelegationTimestamp <= block.timestamp - EPOCH_LENGTH,\\n            ERROR_DELEGATED_RECENTLY\\n            );\\n\\n        uint256 userShares = userShares(msg.sender);\\n        User storage delegate = users[userDelegate];\\n        updateCheckpointArray(\\n            delegate.delegatedTo,\\n            userReceivedDelegation(userDelegate) - userShares\\n            );\\n        updateAddressCheckpointArray(\\n            user.delegates,\\n            address(0)\\n            );\\n        user.mostRecentUndelegationTimestamp = block.timestamp;\\n        emit Undelegated(\\n            msg.sender,\\n            userDelegate\\n            );\\n    }\\n\\n    /// @notice Called internally when the user shares are updated to update\\n    /// the delegated voting power\\n    /// @dev User shares only get updated while staking or scheduling unstaking\\n    /// @param userAddress Address of the user whose delegated voting power\\n    /// will be updated\\n    /// @param shares Amount of shares that will be added/removed\\n    /// @param delta Whether the shares will be added/removed (add for `true`,\\n    /// and vice versa)\\n    function updateDelegatedVotingPower(\\n        address userAddress,\\n        uint256 shares,\\n        bool delta\\n        )\\n        internal\\n    {\\n        address userDelegate = getUserDelegate(userAddress);\\n        if (userDelegate == address(0)) {\\n            return;\\n        }\\n\\n        User storage delegate = users[userDelegate];\\n        uint256 currentlyDelegatedTo = userReceivedDelegation(userDelegate);\\n        uint256 newDelegatedTo;\\n        if (delta) {\\n            newDelegatedTo = currentlyDelegatedTo + shares;\\n        } else {\\n            newDelegatedTo = currentlyDelegatedTo > shares\\n                ? currentlyDelegatedTo - shares\\n                : 0;\\n        }\\n        updateCheckpointArray(\\n            delegate.delegatedTo,\\n            newDelegatedTo\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x81977e0630a5135fea177c47525e9d21868b963de733f3454b330f08ae5f2cf6\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/GetterUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./StateUtils.sol\\\";\\nimport \\\"./interfaces/IGetterUtils.sol\\\";\\n\\n/// @title Contract that implements getters\\nabstract contract GetterUtils is StateUtils, IGetterUtils {\\n\\n    string private constant CHECKPOINT_NOT_FOUND = \\\"API3DAO.GetterUtils: Value cannot be found after provided checkpoint\\\";\\n\\n    /// @notice Called to get the voting power of a user at a checkpoint,\\n    /// closest to the provided block\\n    /// @dev This method is used to implement the MiniMe interface for the\\n    /// Api3Voting app\\n    /// @param userAddress User address\\n    /// @param _block Block number for which the query is being made for\\n    /// @return Voting power of the user at the block\\n    function balanceOfAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        // Users that delegate have no voting power\\n        if (getUserDelegateAt(userAddress, _block) != address(0))\\n        {\\n            return 0;\\n        }\\n        uint256 userSharesThen = userSharesAt(userAddress, _block);\\n        uint256 delegatedToUserThen = getReceivedDelegationAt(userAddress, _block);\\n        return userSharesThen + delegatedToUserThen;\\n    }\\n\\n    /// @notice Called to get the current voting power of a user\\n    /// @dev This method is used to implement the MiniMe interface for the\\n    /// Api3Voting app\\n    /// @param userAddress User address\\n    /// @return Current voting power of the user\\n    function balanceOf(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return balanceOfAt(userAddress, block.number);\\n    }\\n\\n    /// @notice Called to get the total voting power one block ago\\n    /// @dev This method is used to implement the MiniMe interface for the\\n    /// Api3Voting app\\n    /// @return Total voting power one block ago\\n    function totalSupplyOneBlockAgo()\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return totalSharesOneBlockAgo();\\n    }\\n\\n    /// @notice Called to get the current total voting power\\n    /// @dev This method is used to implement the MiniMe interface for the\\n    /// Aragon Voting app\\n    /// @return Current total voting power\\n    function totalSupply()\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return totalShares();\\n    }\\n\\n    /// @notice Called to get the pool shares of a user at a checkpoint,\\n    /// closest to the provided block\\n    /// @dev Starts from the most recent value in `user.shares` and searches\\n    /// backwards one element at a time\\n    /// @param userAddress User address\\n    /// @param _block Block number for which the query is being made for\\n    /// @return Pool shares of the user at the block\\n    function userSharesAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return getValueAt(users[userAddress].shares, _block, 0);\\n    }\\n\\n    /// @notice Called to get the current pool shares of a user\\n    /// @param userAddress User address\\n    /// @return Current pool shares of the user\\n    function userShares(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return userSharesAt(userAddress, block.number);\\n    }\\n\\n    /// @notice Called to get the pool shares of a user at checkpoint,\\n    /// closest to specific block using binary search\\n    /// @dev This method is not used by the current iteration of the DAO/pool\\n    /// and is implemented for future external contracts to use to get the user\\n    /// shares at an arbitrary block.\\n    /// @param userAddress User address\\n    /// @param _block Block number for which the query is being made for\\n    /// @return Pool shares of the user at the block\\n    function userSharesAtWithBinarySearch(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return getValueAtWithBinarySearch(\\n            users[userAddress].shares,\\n            _block,\\n            0\\n            );\\n    }\\n\\n    /// @notice Called to get the current staked tokens of the user\\n    /// @param userAddress User address\\n    /// @return Current staked tokens of the user\\n    function userStake(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return userShares(userAddress) * totalStake / totalShares();\\n    }\\n\\n    /// @notice Called to get the voting power delegated to a user at a\\n    /// checkpoint, closest to specific block\\n    /// @dev `user.delegatedTo` cannot have grown more than 1000 checkpoints\\n    /// in the last epoch due to `proposalVotingPowerThreshold` having a lower\\n    /// limit of 0.1%.\\n    /// @param userAddress User address\\n    /// @param _block Block number for which the query is being made for\\n    /// @return Voting power delegated to the user at the block\\n    function getReceivedDelegationAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        // Binary searching a 1000-long array takes up to 10 storage reads\\n        // (2^10 = 1024). If we approximate the average number of reads\\n        // required to be 5 and consider that it is much more likely for the\\n        // value we are looking for will be at the end of the array (because\\n        // not many proposals will be made per epoch), it is preferable to do\\n        // a linear search at the end of the array if possible. Here, the\\n        // length of \\\"the end of the array\\\" is specified to be 5 (which was the\\n        // expected number of iterations we will need for a binary search).\\n        uint256 maximumLengthToLinearSearch = 5;\\n        // If the value we are looking for is not among the last\\n        // `maximumLengthToLinearSearch`, we will fall back to binary search.\\n        // Here, we will only search through the last 1000 checkpoints because\\n        // `user.delegatedTo` cannot have grown more than 1000 checkpoints in\\n        // the last epoch due to `proposalVotingPowerThreshold` having a lower\\n        // limit of 0.1%.\\n        uint256 maximumLengthToBinarySearch = 1000;\\n        Checkpoint[] storage delegatedTo = users[userAddress].delegatedTo;\\n        if (delegatedTo.length < maximumLengthToLinearSearch) {\\n            return getValueAt(delegatedTo, _block, 0);\\n        }\\n        uint256 minimumCheckpointIndexLinearSearch = delegatedTo.length - maximumLengthToLinearSearch;\\n        if (delegatedTo[minimumCheckpointIndexLinearSearch].fromBlock < _block) {\\n            return getValueAt(delegatedTo, _block, minimumCheckpointIndexLinearSearch);\\n        }\\n        // It is very unlikely for the method to not have returned until here\\n        // because it means there have been `maximumLengthToLinearSearch`\\n        // proposals made in the current epoch.\\n        uint256 minimumCheckpointIndexBinarySearch = delegatedTo.length > maximumLengthToBinarySearch\\n            ? delegatedTo.length - maximumLengthToBinarySearch\\n            : 0;\\n        // The below will revert if the value being searched is not within the\\n        // last `minimumCheckpointIndexBinarySearch` (which is not possible if\\n        // `_block` is the snapshot block of an open vote of Api3Voting,\\n        // because its vote duration is `EPOCH_LENGTH`).\\n        return getValueAtWithBinarySearch(delegatedTo, _block, minimumCheckpointIndexBinarySearch);\\n    }\\n\\n    /// @notice Called to get the current voting power delegated to a user\\n    /// @param userAddress User address\\n    /// @return Current voting power delegated to the user\\n    function userReceivedDelegation(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return getReceivedDelegationAt(userAddress, block.number);\\n    }\\n\\n    /// @notice Called to get the delegate of the user at a checkpoint,\\n    /// closest to specified block\\n    /// @dev Starts from the most recent value in `user.delegates` and\\n    /// searches backwards one element at a time. If `_block` is within\\n    /// `EPOCH_LENGTH`, this call is guaranteed to find the value among\\n    /// the last 2 elements because a user cannot update delegate more\\n    /// frequently than once an `EPOCH_LENGTH`.\\n    /// @param userAddress User address\\n    /// @param _block Block number\\n    /// @return Delegate of the user at the specific block\\n    function getUserDelegateAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        public\\n        view\\n        override\\n        returns(address)\\n    {\\n        AddressCheckpoint[] storage delegates = users[userAddress].delegates;\\n        for (uint256 i = delegates.length; i > 0; i--)\\n        {\\n            if (delegates[i - 1].fromBlock <= _block)\\n            {\\n                return delegates[i - 1]._address;\\n            }\\n        }\\n        return address(0);\\n    }\\n\\n    /// @notice Called to get the current delegate of the user\\n    /// @param userAddress User address\\n    /// @return Current delegate of the user\\n    function getUserDelegate(address userAddress)\\n        public\\n        view\\n        override\\n        returns(address)\\n    {\\n        return getUserDelegateAt(userAddress, block.number);\\n    }\\n\\n    /// @notice Called to get the current locked tokens of the user\\n    /// @param userAddress User address\\n    /// @return locked Current locked tokens of the user\\n    function getUserLocked(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256 locked)\\n    {\\n        Checkpoint[] storage _userShares = users[userAddress].shares;\\n        uint256 currentEpoch = block.timestamp / EPOCH_LENGTH;\\n        uint256 oldestLockedEpoch = currentEpoch - REWARD_VESTING_PERIOD > genesisEpoch\\n            ? currentEpoch - REWARD_VESTING_PERIOD + 1\\n            : genesisEpoch + 1;\\n\\n        if (_userShares.length == 0)\\n        {\\n            return 0;\\n        }\\n        uint256 indUserShares = _userShares.length - 1;\\n        for (\\n                uint256 indEpoch = currentEpoch;\\n                indEpoch >= oldestLockedEpoch;\\n                indEpoch--\\n            )\\n        {\\n            Reward storage lockedReward = epochIndexToReward[indEpoch];\\n            if (lockedReward.atBlock != 0)\\n            {\\n                for (; indUserShares >= 0; indUserShares--)\\n                {\\n                    Checkpoint storage userShare = _userShares[indUserShares];\\n                    if (userShare.fromBlock <= lockedReward.atBlock)\\n                    {\\n                        locked += lockedReward.amount * userShare.value / lockedReward.totalSharesThen;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Called to get the details of a user\\n    /// @param userAddress User address\\n    /// @return unstaked Amount of unstaked API3 tokens\\n    /// @return vesting Amount of API3 tokens locked by vesting\\n    /// @return unstakeShares Shares scheduled to unstake\\n    /// @return unstakeAmount Amount scheduled to unstake\\n    /// @return unstakeScheduledFor Time unstaking is scheduled for\\n    /// @return mostRecentProposalTimestamp Time when the user made their most\\n    /// recent proposal\\n    /// @return mostRecentVoteTimestamp Time when the user cast their most\\n    /// recent vote\\n    /// @return mostRecentDelegationTimestamp Time when the user made their\\n    /// most recent delegation\\n    /// @return mostRecentUndelegationTimestamp Time when the user made their\\n    /// most recent undelegation\\n    function getUser(address userAddress)\\n        external\\n        view\\n        override\\n        returns(\\n            uint256 unstaked,\\n            uint256 vesting,\\n            uint256 unstakeShares,\\n            uint256 unstakeAmount,\\n            uint256 unstakeScheduledFor,\\n            uint256 mostRecentProposalTimestamp,\\n            uint256 mostRecentVoteTimestamp,\\n            uint256 mostRecentDelegationTimestamp,\\n            uint256 mostRecentUndelegationTimestamp\\n            )\\n    {\\n        User storage user = users[userAddress];\\n        unstaked = user.unstaked;\\n        vesting = user.vesting;\\n        unstakeShares = user.unstakeShares;\\n        unstakeAmount = user.unstakeAmount;\\n        unstakeScheduledFor = user.unstakeScheduledFor;\\n        mostRecentProposalTimestamp = user.mostRecentProposalTimestamp;\\n        mostRecentVoteTimestamp = user.mostRecentVoteTimestamp;\\n        mostRecentDelegationTimestamp = user.mostRecentDelegationTimestamp;\\n        mostRecentUndelegationTimestamp = user.mostRecentUndelegationTimestamp;\\n    }\\n\\n    /// @notice Called to get the value of a checkpoint array closest to\\n    /// the specific block\\n    /// @param checkpoints Checkpoints array\\n    /// @param _block Block number for which the query is being made\\n    /// @return Value of the checkpoint array at the block\\n    function getValueAt(\\n        Checkpoint[] storage checkpoints,\\n        uint256 _block,\\n        uint256 minimumCheckpointIndex\\n        )\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        uint256 i = checkpoints.length;\\n        for (; i > minimumCheckpointIndex; i--)\\n        {\\n            if (checkpoints[i - 1].fromBlock <= _block)\\n            {\\n                return checkpoints[i - 1].value;\\n            }\\n        }\\n        // Revert if the value being searched for comes before\\n        // `minimumCheckpointIndex`\\n        require(i == 0, CHECKPOINT_NOT_FOUND);\\n        return 0;\\n    }\\n\\n    /// @notice Called to get the value of the checkpoint array  closest to the\\n    /// specific block\\n    /// @dev Adapted from\\n    /// https://github.com/aragon/minime/blob/1d5251fc88eee5024ff318d95bc9f4c5de130430/contracts/MiniMeToken.sol#L431\\n    /// Allows the caller to specify the portion of the array that will be\\n    /// searched. This allows us to avoid having to search arrays that can grow\\n    /// unboundedly.\\n    /// @param checkpoints Checkpoint array\\n    /// @param _block Block number for which the query is being made\\n    /// @param minimumCheckpointIndex Index of the earliest checkpoint that may\\n    /// be keeping the value we are looking for\\n    /// @return Value of the checkpoint array at `_block`\\n    function getValueAtWithBinarySearch(\\n        Checkpoint[] storage checkpoints,\\n        uint256 _block,\\n        uint256 minimumCheckpointIndex\\n        )\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        if (checkpoints.length == 0)\\n            return 0;\\n        assert(checkpoints.length > minimumCheckpointIndex);\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length - 1].fromBlock) {\\n            return checkpoints[checkpoints.length - 1].value;\\n        }\\n        // Revert if the value being searched for comes before\\n        // `minimumCheckpointIndex`\\n        if (_block < checkpoints[minimumCheckpointIndex].fromBlock) {\\n            if (minimumCheckpointIndex == 0) {\\n                return 0;\\n            }\\n            else {\\n                revert(CHECKPOINT_NOT_FOUND);\\n            }\\n        }\\n\\n        // Binary search of the value in the array\\n        uint min = minimumCheckpointIndex;\\n        uint max = checkpoints.length - 1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock <= _block) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n}\\n\",\"keccak256\":\"0xf2729f46a0e2bd1f59c99cfae14d1f0d4db36ceafc248554f9a5e51ec20f7661\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/RewardUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./GetterUtils.sol\\\";\\nimport \\\"./interfaces/IRewardUtils.sol\\\";\\n\\n/// @title Contract that implements reward payments and locks\\nabstract contract RewardUtils is GetterUtils, IRewardUtils {\\n    /// @notice Called to pay the reward for the current epoch\\n    /// @dev Skips past epochs for which rewards have not been paid for.\\n    /// Skips the reward payment if the pool is not authorized to mint tokens.\\n    /// Neither of these conditions will occur in practice.\\n    function payReward()\\n        public\\n        override\\n    {\\n        uint256 currentEpoch = block.timestamp / EPOCH_LENGTH;\\n        // This will be skipped in most cases because someone else will have\\n        // triggered the payment for this epoch\\n        if (epochIndexOfLastRewardPayment < currentEpoch)\\n        {\\n            if (api3Token.getMinterStatus(address(this)))\\n            {\\n                updateCurrentApr();\\n                uint256 rewardAmount = totalStake * currentApr / REWARD_VESTING_PERIOD / HUNDRED_PERCENT;\\n                epochIndexToReward[currentEpoch] = Reward({\\n                    atBlock: block.number,\\n                    amount: rewardAmount,\\n                    totalSharesThen: totalShares()\\n                    });\\n                api3Token.mint(address(this), rewardAmount);\\n                totalStake = totalStake + rewardAmount;\\n                emit PaidReward(\\n                    currentEpoch,\\n                    rewardAmount,\\n                    currentApr\\n                    );\\n            }\\n            epochIndexOfLastRewardPayment = currentEpoch;\\n        }\\n    }\\n\\n    /// @notice Updates the current APR\\n    /// @dev Called internally before paying out the reward\\n    function updateCurrentApr()\\n        internal\\n    {\\n        uint256 totalStakePercentage = totalStake\\n            * HUNDRED_PERCENT\\n            / api3Token.totalSupply();\\n        if (totalStakePercentage > stakeTarget) {\\n            currentApr = currentApr > aprUpdateStep ? currentApr - aprUpdateStep : 0;\\n        }\\n        else {\\n            currentApr += aprUpdateStep;\\n        }\\n        if (currentApr > maxApr) {\\n            currentApr = maxApr;\\n        }\\n        else if (currentApr < minApr) {\\n            currentApr = minApr;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9745b199e891d8ddbfe3528b9850fb183366677ac35a32c6d24272f2f4ffa28\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/StakeUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./TransferUtils.sol\\\";\\nimport \\\"./interfaces/IStakeUtils.sol\\\";\\n\\n/// @title Contract that implements staking functionality\\nabstract contract StakeUtils is TransferUtils, IStakeUtils {\\n\\n\\n    string private constant ERROR_NOT_ENOUGH_FUNDS = \\\"API3DAO.StakeUtils: User don't have enough token to stake/unstake the provided amount\\\";\\n    string private constant ERROR_NOT_ENOUGH_SHARES = \\\"API3DAO.StakeUtils: User don't have enough pool shares to unstake the provided amount\\\";\\n    string private constant ERROR_UNSTAKE_TIMING = \\\"API3DAO.StakeUtils: Scheduled unstake has not matured yet\\\";\\n    string private constant ERROR_STAKING_ADDRESS = \\\"API3DAO.StakeUtils: It is only possible to stake to yourself\\\";\\n    string private constant ERROR_ALREADY_SCHEDULED = \\\"API3DAO.StakeUtils: User has already scheduled an unstake\\\";\\n    string private constant ERROR_NO_SCHEDULED = \\\"API3DAO.StakeUtils: User has no scheduled unstake to execute\\\";\\n\\n    /// @notice Called to stake tokens to receive pools in the share\\n    /// @param amount Amount of tokens to stake\\n    function stake(uint256 amount)\\n        public\\n        override\\n    {\\n        payReward();\\n        User storage user = users[msg.sender];\\n        require(user.unstaked >= amount, ERROR_NOT_ENOUGH_FUNDS);\\n        user.unstaked = user.unstaked - amount;\\n        uint256 totalSharesNow = totalShares();\\n        uint256 sharesToMint = totalSharesNow * amount / totalStake;\\n        uint256 userSharesNow = userShares(msg.sender);\\n        user.shares.push(Checkpoint({\\n            fromBlock: block.number,\\n            value: userSharesNow + sharesToMint\\n            }));\\n        uint256 totalSharesAfter = totalSharesNow + sharesToMint;\\n        updateTotalShares(totalSharesAfter);\\n        totalStake = totalStake + amount;\\n        updateDelegatedVotingPower(msg.sender, sharesToMint, true);\\n        emit Staked(\\n            msg.sender,\\n            amount,\\n            totalSharesAfter\\n            );\\n    }\\n\\n    /// @notice Convenience method to deposit and stake in a single transaction\\n    /// @dev Due to the `deposit()` interface, `userAddress` can only be the\\n    /// caller\\n    /// @param source Token transfer source\\n    /// @param amount Amount to be deposited and staked\\n    function depositAndStake(\\n        address source,\\n        uint256 amount\\n        )\\n        external\\n        override\\n    {\\n        deposit(source, amount, msg.sender);\\n        stake(amount);\\n    }\\n\\n    /// @notice Called by the user to schedule unstaking of their tokens\\n    /// @dev While scheduling an unstake, `shares` get deducted from the user,\\n    /// meaning that they will not receive rewards or voting power for them any\\n    /// longer.\\n    /// At unstaking-time, the user unstakes either the amount of tokens\\n    /// `shares` corresponds to at scheduling-time, or the amount of tokens\\n    /// `shares` corresponds to at unstaking-time, whichever is smaller. This\\n    /// corresponds to tokens being scheduled to be unstaked not receiving any\\n    /// rewards, but being subject to claim payouts.\\n    /// In the instance that a claim has been paid out before an unstaking is\\n    /// executed, the user may potentially receive rewards during\\n    /// `unstakeWaitPeriod` (but not if there has not been a claim payout) but\\n    /// the amount of tokens that they can unstake will not be able to exceed\\n    /// the amount they scheduled the unstaking for.\\n    /// @param shares Amount of shares to be burned to unstake tokens\\n    function scheduleUnstake(uint256 shares)\\n        external\\n        override\\n    {\\n        payReward();\\n        uint256 userSharesNow = userShares(msg.sender);\\n        require(\\n            userSharesNow >= shares,\\n            ERROR_NOT_ENOUGH_SHARES\\n            );\\n        User storage user = users[msg.sender];\\n        require(user.unstakeScheduledFor == 0, ERROR_ALREADY_SCHEDULED);\\n        uint256 amount = shares * totalStake / totalShares();\\n        user.unstakeScheduledFor = block.timestamp + unstakeWaitPeriod;\\n        user.unstakeAmount = amount;\\n        user.unstakeShares = shares;\\n        user.shares.push(Checkpoint({\\n            fromBlock: block.number,\\n            value: userSharesNow - shares\\n            }));\\n        updateDelegatedVotingPower(msg.sender, shares, false);\\n        emit ScheduledUnstake(\\n            msg.sender,\\n            shares,\\n            amount,\\n            user.unstakeScheduledFor\\n            );\\n    }\\n\\n    /// @notice Called to execute a pre-scheduled unstake\\n    /// @dev Anyone can execute a mature scheduled unstake\\n    /// @param userAddress Address of the user whose scheduled unstaking will\\n    /// be executed\\n    /// @return Amount of tokens that are unstaked\\n    function unstake(address userAddress)\\n        public\\n        override\\n        returns(uint256)\\n    {\\n        payReward();\\n        User storage user = users[userAddress];\\n        require(user.unstakeScheduledFor != 0, ERROR_NO_SCHEDULED);\\n        require(user.unstakeScheduledFor < block.timestamp, ERROR_UNSTAKE_TIMING);\\n\\n        uint256 totalShares = totalShares();\\n        uint256 unstakeAmountAtSchedulingTime = user.unstakeAmount;\\n        uint256 unstakeAmountByShares = user.unstakeShares * totalStake / totalShares;\\n        uint256 unstakeAmount = unstakeAmountAtSchedulingTime > unstakeAmountByShares\\n            ? unstakeAmountByShares\\n            : unstakeAmountAtSchedulingTime;\\n        unstakeAmount = unstakeAmount < totalStake ? unstakeAmount : totalStake - 1;\\n        user.unstaked = user.unstaked + unstakeAmount;\\n\\n        updateTotalShares(totalShares - user.unstakeShares);\\n        totalStake = totalStake - unstakeAmount;\\n\\n        user.unstakeShares = 0;\\n        user.unstakeAmount = 0;\\n        user.unstakeScheduledFor = 0;      \\n        emit Unstaked(\\n            userAddress,\\n            unstakeAmount\\n            );\\n        return unstakeAmount;\\n    }\\n\\n    /// @notice Convenience method to execute an unstake and withdraw in a\\n    /// single transaction\\n    /// @dev Note that withdraw may revert because the user may have less than\\n    /// `unstaked` tokens that are withdrawable\\n    /// @param destination Token transfer destination\\n    function unstakeAndWithdraw(address destination)\\n        external\\n        override\\n    {\\n        uint256 unstaked = unstake(msg.sender);\\n        withdraw(destination, unstaked);\\n    }\\n}\\n\",\"keccak256\":\"0xbf313d9c6ecb1833a629d380136e17c22b478078a754d6ef297e1eb36ed70bd0\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/StateUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./auxiliary/interfaces/v0.8.4/IApi3Token.sol\\\";\\nimport \\\"./interfaces/IStateUtils.sol\\\";\\n\\n/// @title Contract that keeps state variables\\ncontract StateUtils is IStateUtils {\\n    struct Checkpoint {\\n        uint256 fromBlock;\\n        uint256 value;\\n    }\\n\\n    struct AddressCheckpoint {\\n        uint256 fromBlock;\\n        address _address;\\n    }\\n\\n    struct Reward {\\n        uint256 atBlock;\\n        uint256 amount;\\n        uint256 totalSharesThen;\\n    }\\n\\n    struct User {\\n        Checkpoint[] shares;\\n        AddressCheckpoint[] delegates;\\n        Checkpoint[] delegatedTo;\\n        uint256 unstaked;\\n        uint256 vesting;\\n        uint256 unstakeShares;\\n        uint256 unstakeAmount;\\n        uint256 unstakeScheduledFor;\\n        uint256 mostRecentProposalTimestamp;\\n        uint256 mostRecentVoteTimestamp;\\n        uint256 mostRecentDelegationTimestamp;\\n        uint256 mostRecentUndelegationTimestamp;\\n    }\\n\\n    /// @notice Length of the epoch in which the staking reward is paid out\\n    /// once. It is hardcoded as 7 days in seconds.\\n    /// @dev In addition to regulating reward payments, this variable is used\\n    /// for four additional things:\\n    /// (1) Once an unstaking scheduling matures, the user has `EPOCH_LENGTH`\\n    /// to execute the unstaking before it expires\\n    /// (2) After a user makes a proposal, they cannot make a second one\\n    /// before `EPOCH_LENGTH` has passed\\n    /// (3) After a user updates their delegation status, they have to wait\\n    /// `EPOCH_LENGTH` before updating it again\\n    uint256 public constant EPOCH_LENGTH = 7 * 24 * 60 * 60;\\n\\n    /// @notice Number of epochs before the staking rewards get unlocked.\\n    /// Hardcoded as 52 epochs, which corresponds to a year.\\n    uint256 public constant REWARD_VESTING_PERIOD = 52;\\n\\n    string internal constant ERROR_PERCENTAGE = \\\"API3DAO.StateUtils: Percentage should be between 0 and 100\\\";\\n    string internal constant ERROR_APR = \\\"API3DAO.StateUtils: Max APR should be bigger than min apr\\\";\\n    string internal constant ERROR_UNSTAKE_PERIOD = \\\"API3DAO.StateUtils: Should wait for time bigger than EPOCH_LENGTH to unstake\\\";\\n    string internal constant ERROR_PROPOSAL_THRESHOLD = \\\"API3DAO.StateUtils: Threshold should be lower then 10%\\\";\\n    string internal constant ERROR_ZERO_ADDRESS = \\\"API3DAO.StateUtils: Addresses should not be 0x00\\\";\\n    string internal constant ERROR_ONLY_AGENT = \\\"API3DAO.StateUtils: Only Agent app is allowed to execute this function\\\";\\n    string internal constant ERROR_ONLY_PRIMARY_AGENT = \\\"API3DAO.StateUtils: Only primary Agent app is allowed to execute this function\\\";\\n    string internal constant ERROR_ONLY_VOTING = \\\"API3DAO.StateUtils: Only Voting app is allowed to execute this function\\\";\\n    string internal constant ERROR_FREQUENCY = \\\"API3DAO.StateUtils: Try again a week later\\\";\\n    string internal constant ERROR_DELEGATE = \\\"API3DAO.StateUtils: Cannot delegate to the same address\\\";\\n\\n    // All percentage values are represented by multiplying by 1e16\\n    uint256 internal constant HUNDRED_PERCENT = 1e18;\\n    uint256 internal constant ONE_PERCENT = HUNDRED_PERCENT / 100;\\n\\n    /// @notice API3 token contract\\n    IApi3Token public api3Token;\\n\\n    /// @notice Address of the primary Agent app of the API3 DAO\\n    /// @dev Primary Agent can be operated through the primary Api3Voting app.\\n    /// The primary Api3Voting app requires a higher quorum, and the primary\\n    /// Agent is more privileged.\\n    address public agentAppPrimary;\\n\\n    /// @notice Address of the secondary Agent app of the API3 DAO\\n    /// @dev Secondary Agent can be operated through the secondary Api3Voting\\n    /// app. The secondary Api3Voting app requires a lower quorum, and the primary\\n    /// Agent is less privileged.\\n    address public agentAppSecondary;\\n\\n    /// @notice Address of the primary Api3Voting app of the API3 DAO\\n    /// @dev Used to operate the primary Agent\\n    address public votingAppPrimary;\\n\\n    /// @notice Address of the secondary Api3Voting app of the API3 DAO\\n    /// @dev Used to operate the secondary Agent\\n    address public votingAppSecondary;\\n\\n    /// @notice Mapping that keeps the claims manager statuses of addresses\\n    /// @dev A claims manager is a contract that is authorized to pay out\\n    /// claims from the staking pool, effectively slashing the stakers. The\\n    /// statuses are kept as a mapping to support multiple claims managers.\\n    mapping(address => bool) public claimsManagerStatus;\\n\\n    /// @notice Epochs are indexed as `block.timestamp / EPOCH_LENGTH`.\\n    /// `genesisEpoch` is the index of the epoch in which the pool is deployed.\\n    uint256 public immutable genesisEpoch;\\n\\n    /// @notice Records of rewards paid in each epoch\\n    /// @dev `.atBlock` of a past epoch's reward record being `0` means no\\n    /// reward was paid for that block\\n    mapping(uint256 => Reward) public epochIndexToReward;\\n\\n    /// @notice Epoch index of the most recent reward payment\\n    uint256 public epochIndexOfLastRewardPayment;\\n\\n    /// @notice User records\\n    mapping(address => User) public users;\\n\\n    /// @notice Total number of tokens staked at the pool\\n    uint256 public totalStake;\\n\\n    /// @notice Stake target the pool will aim to meet in percentages of the\\n    /// total token supply. The staking rewards increase if the total staked\\n    /// amount is below this, and vice versa.\\n    /// @dev Default value is 50% of the total API3 token supply. This\\n    /// parameter is governable by the DAO.\\n    uint256 public stakeTarget = 50 * ONE_PERCENT;\\n\\n    /// @notice Minimum APR (annual percentage rate) the pool will pay as\\n    /// staking rewards in percentages\\n    /// @dev Default value is 2.5%. This parameter is governable by the DAO.\\n    uint256 public minApr = 25 * ONE_PERCENT / 10;\\n\\n    /// @notice Maximum APR (annual percentage rate) the pool will pay as\\n    /// staking rewards in percentages\\n    /// @dev Default value is 75%. This parameter is governable by the DAO.\\n    uint256 public maxApr = 75 * ONE_PERCENT;\\n\\n    /// @notice Steps in which APR will be updated in percentages\\n    /// @dev Default value is 1%. This parameter is governable by the DAO.\\n    uint256 public aprUpdateStep = ONE_PERCENT;\\n\\n    /// @notice Users need to schedule an unstake and wait for\\n    /// `unstakeWaitPeriod` before being able to unstake. This is to prevent\\n    /// the stakers from frontrunning insurance claims by unstaking to evade\\n    /// them, or repeatedly unstake/stake to work around the proposal spam\\n    /// protection.\\n    /// @dev This parameter is governable by the DAO, and the DAO is expected\\n    /// to set this to a value that is large enough to allow insurance claims\\n    /// to be resolved.\\n    uint256 public unstakeWaitPeriod = EPOCH_LENGTH;\\n\\n    /// @notice Minimum voting power the users must have to be able to make\\n    /// proposals (in percentages)\\n    /// @dev Delegations count towards voting power.\\n    /// Default value is 0.1%. This parameter is governable by the DAO.\\n    uint256 public proposalVotingPowerThreshold = ONE_PERCENT / 10;\\n\\n    /// @notice APR that will be paid next epoch\\n    /// @dev This value will reach an equilibrium based on the stake target.\\n    /// Every epoch (week), APR/52 of the total staked tokens will be added to\\n    /// the pool, effectively distributing them to the stakers.\\n    uint256 public currentApr = (maxApr + minApr) / 2;\\n\\n    // Snapshot block number of the last vote created at one of the DAO\\n    // Api3Voting apps\\n    uint256 private lastVoteSnapshotBlock;\\n    mapping(uint256 => uint256) private snapshotBlockToTimestamp;\\n\\n    // We keep checkpoints for two most recent blocks at which totalShares has\\n    // been updated. Note that the indices do not indicate chronological\\n    // ordering.\\n    Checkpoint private totalSharesCheckpoint1;\\n    Checkpoint private totalSharesCheckpoint2;\\n\\n    /// @dev Reverts if the caller is not an API3 DAO Agent\\n    modifier onlyAgentApp() {\\n        require(\\n            msg.sender == agentAppPrimary || msg.sender == agentAppSecondary,\\n            ERROR_ONLY_AGENT\\n            );\\n        _;\\n    }\\n\\n    /// @dev Reverts if the caller is not the primary API3 DAO Agent\\n    modifier onlyAgentAppPrimary() {\\n        require(msg.sender == agentAppPrimary, ERROR_ONLY_PRIMARY_AGENT);\\n        _;\\n    }\\n\\n    /// @dev Reverts if the caller is not an API3 DAO Api3Voting app\\n    modifier onlyVotingApp() {\\n        require(\\n            msg.sender == votingAppPrimary || msg.sender == votingAppSecondary,\\n            ERROR_ONLY_VOTING\\n            );\\n        _;\\n    }\\n\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n    {\\n        api3Token = IApi3Token(api3TokenAddress);\\n        // Initialize the share price at 1\\n        updateTotalShares(1);\\n        totalStake = 1;\\n        // Set the current epoch as the genesis epoch and skip its reward\\n        // payment\\n        uint256 currentEpoch = block.timestamp / EPOCH_LENGTH;\\n        genesisEpoch = currentEpoch;\\n        epochIndexOfLastRewardPayment = currentEpoch;\\n    }\\n\\n    /// @notice Called after deployment to set the addresses of the DAO apps\\n    /// @dev This can also be called later on by the primary Agent to update\\n    /// all app addresses as a means of upgrade\\n    /// @param _agentAppPrimary Address of the primary Agent\\n    /// @param _agentAppSecondary Address of the secondary Agent\\n    /// @param _votingAppPrimary Address of the primary Api3Voting\\n    /// @param _votingAppSecondary Address of the secondary Api3Voting\\n    function setDaoApps(\\n        address _agentAppPrimary,\\n        address _agentAppSecondary,\\n        address _votingAppPrimary,\\n        address _votingAppSecondary\\n        )\\n        external\\n        override\\n    {\\n        require(\\n            agentAppPrimary == address(0) || msg.sender == agentAppPrimary,\\n            ERROR_ONLY_AGENT\\n            );\\n        require(\\n            _agentAppPrimary != address(0)\\n                && _agentAppSecondary  != address(0)\\n                && _votingAppPrimary  != address(0)\\n                && _votingAppSecondary  != address(0),\\n            ERROR_ZERO_ADDRESS\\n            );\\n        agentAppPrimary = _agentAppPrimary;\\n        agentAppSecondary = _agentAppSecondary;\\n        votingAppPrimary = _votingAppPrimary;\\n        votingAppSecondary = _votingAppSecondary;\\n        emit SetDaoApps(\\n            agentAppPrimary,\\n            agentAppSecondary,\\n            votingAppPrimary,\\n            votingAppSecondary\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the authorization status of a\\n    /// claims manager contract\\n    /// @dev The claims manager is a trusted contract that is allowed to\\n    /// withdraw as many tokens as it wants from the pool to pay out insurance\\n    /// claims.\\n    /// Only the primary Agent can do this because it is a critical operation.\\n    /// @param claimsManager Claims manager contract address\\n    /// @param status Authorization status\\n    function setClaimsManagerStatus(\\n        address claimsManager,\\n        bool status\\n        )\\n        external\\n        override\\n        onlyAgentAppPrimary()\\n    {\\n        claimsManagerStatus[claimsManager] = status;\\n        emit SetClaimsManagerStatus(\\n            claimsManager,\\n            status\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the stake target\\n    /// @param _stakeTarget Stake target\\n    function setStakeTarget(uint256 _stakeTarget)\\n        external\\n        override\\n        onlyAgentApp()\\n    {\\n        require(\\n            _stakeTarget <= HUNDRED_PERCENT,\\n            ERROR_PERCENTAGE);\\n        uint256 oldStakeTarget = stakeTarget;\\n        stakeTarget = _stakeTarget;\\n        emit SetStakeTarget(\\n            oldStakeTarget,\\n            stakeTarget\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the maximum APR\\n    /// @param _maxApr Maximum APR\\n    function setMaxApr(uint256 _maxApr)\\n        external\\n        override\\n        onlyAgentApp()\\n    {\\n        require(_maxApr >= minApr, ERROR_APR);\\n        uint256 oldMaxApr = maxApr;\\n        maxApr = _maxApr;\\n        emit SetMaxApr(\\n            oldMaxApr,\\n            maxApr\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the minimum APR\\n    /// @param _minApr Minimum APR\\n    function setMinApr(uint256 _minApr)\\n        external\\n        override\\n        onlyAgentApp()\\n    {\\n        require(_minApr <= maxApr, ERROR_APR);\\n        uint256 oldMinApr = minApr;\\n        minApr = _minApr;\\n        emit SetMinApr(\\n            oldMinApr,\\n            minApr\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the unstake waiting period\\n    /// @dev This may want to be increased to provide more time for insurance\\n    /// claims to be resolved.\\n    /// Even when the insurance functionality is not implemented, the minimum\\n    /// valid value is `EPOCH_LENGTH` to prevent users from unstaking,\\n    /// withdrawing and staking with another address to work around the\\n    /// proposal spam protection.\\n    /// Only the primary Agent can do this because it is a critical operation.\\n    /// @param _unstakeWaitPeriod Unstake waiting period\\n    function setUnstakeWaitPeriod(uint256 _unstakeWaitPeriod)\\n        external\\n        override\\n        onlyAgentAppPrimary()\\n    {\\n        require(_unstakeWaitPeriod >= EPOCH_LENGTH, ERROR_UNSTAKE_PERIOD);\\n        uint256 oldUnstakeWaitPeriod = unstakeWaitPeriod;\\n        unstakeWaitPeriod = _unstakeWaitPeriod;\\n        emit SetUnstakeWaitPeriod(\\n            oldUnstakeWaitPeriod,\\n            unstakeWaitPeriod\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the APR update steps\\n    /// @dev aprUpdateStep can be 0% or 100%+\\n    /// @param _aprUpdateStep APR update steps\\n    function setAprUpdateStep(uint256 _aprUpdateStep)\\n        external\\n        override\\n        onlyAgentApp()\\n    {\\n        uint256 oldAprUpdateStep = aprUpdateStep;\\n        aprUpdateStep = _aprUpdateStep;\\n        emit SetAprUpdateStep(\\n            oldAprUpdateStep,\\n            aprUpdateStep\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the voting power threshold for\\n    /// proposals\\n    /// Only the primary Agent can do this because it is a critical operation.\\n    /// @dev Proposal voting power is limited between 0.1% and 10%. 0.1% is to\\n    /// ensure that no more than 1000 proposals can be made within an epoch\\n    /// (see `getReceivedDelegationAt()`) and any value above 10% is certainly\\n    /// an error.\\n    /// @param _proposalVotingPowerThreshold Voting power threshold for\\n    /// proposals\\n    function setProposalVotingPowerThreshold(uint256 _proposalVotingPowerThreshold)\\n        external\\n        override\\n        onlyAgentAppPrimary()\\n    {\\n        require(\\n            _proposalVotingPowerThreshold >= ONE_PERCENT / 10\\n                && _proposalVotingPowerThreshold <= 10 * ONE_PERCENT,\\n            ERROR_PROPOSAL_THRESHOLD);\\n        uint256 oldProposalVotingPowerThreshold = proposalVotingPowerThreshold;\\n        proposalVotingPowerThreshold = _proposalVotingPowerThreshold;\\n        emit SetProposalVotingPowerThreshold(\\n            oldProposalVotingPowerThreshold,\\n            proposalVotingPowerThreshold\\n            );\\n    }\\n\\n    /// @notice Called by a DAO Api3Voting app to update the last vote snapshot\\n    /// block number\\n    /// @param snapshotBlock Last vote snapshot block number\\n    function updateLastVoteSnapshotBlock(uint256 snapshotBlock)\\n        external\\n        override\\n        onlyVotingApp()\\n    {\\n        lastVoteSnapshotBlock = snapshotBlock;\\n        snapshotBlockToTimestamp[snapshotBlock] = block.timestamp;\\n        emit UpdatedLastVoteSnapshotBlock(\\n            msg.sender,\\n            snapshotBlock,\\n            block.timestamp\\n            );\\n    }\\n\\n    /// @notice Called by a DAO Api3Voting app at proposal creation-time to\\n    /// update the timestamp of the user's most recent proposal\\n    /// @param userAddress User address\\n    function updateMostRecentProposalTimestamp(address userAddress)\\n        external\\n        override\\n        onlyVotingApp()\\n    {\\n        users[userAddress].mostRecentProposalTimestamp = block.timestamp;\\n    }\\n\\n    /// @notice Called by a DAO Api3Voting app at voting-time to update the\\n    /// timestamp of the user's most recent vote\\n    /// @param userAddress User address\\n    function updateMostRecentVoteTimestamp(address userAddress)\\n        external\\n        override\\n        onlyVotingApp()\\n    {\\n        users[userAddress].mostRecentVoteTimestamp = block.timestamp;\\n    }\\n\\n    /// @notice Called internally to update the total shares history\\n    /// @dev `fromBlock0` and `fromBlock1` will be two different block numbers\\n    /// when totalShares history was last updated. If one of these\\n    /// `fromBlock`s match with `block.number`, we simply update the value\\n    /// (because the history keeps the most recent value from that block). If\\n    /// not, we can overwrite the older one, as we no longer need it.\\n    /// @param newTotalShares Total shares value to insert into history\\n    function updateTotalShares(uint256 newTotalShares)\\n        internal\\n    {\\n        if (block.number == totalSharesCheckpoint1.fromBlock)\\n        {\\n            totalSharesCheckpoint1.value = newTotalShares;\\n        }\\n        else if (block.number == totalSharesCheckpoint2.fromBlock)\\n        {\\n            totalSharesCheckpoint2.value = newTotalShares;\\n        }\\n        else {\\n            if (totalSharesCheckpoint1.fromBlock < totalSharesCheckpoint2.fromBlock)\\n            {\\n                totalSharesCheckpoint1.fromBlock = block.number;\\n                totalSharesCheckpoint1.value = newTotalShares;\\n            }\\n            else\\n            {\\n                totalSharesCheckpoint2.fromBlock = block.number;\\n                totalSharesCheckpoint2.value = newTotalShares;\\n            }\\n        }\\n    }\\n\\n    /// @notice Called internally to get the current total shares\\n    /// @return Current total shares\\n    function totalShares()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (totalSharesCheckpoint1.fromBlock < totalSharesCheckpoint2.fromBlock)\\n        {\\n            return totalSharesCheckpoint2.value;\\n        }\\n        else\\n        {\\n            return totalSharesCheckpoint1.value;\\n        }\\n    }\\n\\n    /// @notice Called internally to get the total shares one block ago\\n    /// @return Total shares one block ago\\n    function totalSharesOneBlockAgo()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (totalSharesCheckpoint2.fromBlock == block.number)\\n        {\\n            return totalSharesCheckpoint1.value;\\n        }\\n        else if (totalSharesCheckpoint1.fromBlock == block.number)\\n        {\\n            return totalSharesCheckpoint2.value;\\n        }\\n        else\\n        {\\n            return totalShares();\\n        }\\n    }\\n\\n    /// @notice Called internally to update a checkpoint array\\n    /// @param checkpointArray Checkpoint array to be updated\\n    /// @param value Value to be updated with\\n    function updateCheckpointArray(\\n        Checkpoint[] storage checkpointArray,\\n        uint256 value\\n        )\\n        internal\\n    {\\n        if (checkpointArray.length == 0)\\n        {\\n            checkpointArray.push(Checkpoint({\\n                fromBlock: lastVoteSnapshotBlock,\\n                value: value\\n                }));\\n        }\\n        else\\n        {\\n            Checkpoint storage lastElement = checkpointArray[checkpointArray.length - 1];\\n            if (lastElement.fromBlock < lastVoteSnapshotBlock)\\n            {\\n                checkpointArray.push(Checkpoint({\\n                    fromBlock: lastVoteSnapshotBlock,\\n                    value: value\\n                    }));\\n            }\\n            else\\n            {\\n                lastElement.value = value;\\n            }\\n        }\\n    }\\n\\n    /// @notice Called internally to update an address checkpoint array\\n    /// @param addressCheckpointArray Address checkpoint array to be updated\\n    /// @param _address Address to be updated with\\n    function updateAddressCheckpointArray(\\n        AddressCheckpoint[] storage addressCheckpointArray,\\n        address _address\\n        )\\n        internal\\n    {\\n        if (addressCheckpointArray.length == 0)\\n        {\\n            addressCheckpointArray.push(AddressCheckpoint({\\n                fromBlock: lastVoteSnapshotBlock,\\n                _address: _address\\n                }));\\n        }\\n        else\\n        {\\n            AddressCheckpoint storage lastElement = addressCheckpointArray[addressCheckpointArray.length - 1];\\n            if (lastElement.fromBlock < lastVoteSnapshotBlock)\\n            {\\n                addressCheckpointArray.push(AddressCheckpoint({\\n                    fromBlock: lastVoteSnapshotBlock,\\n                    _address: _address\\n                    }));\\n            }\\n            else\\n            {\\n                lastElement._address = _address;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd706c45aba4713a7e48db5c1c51e0e7fe1e9efaef66cb3e92f66f2c71995b95a\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/TimelockUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./ClaimUtils.sol\\\";\\nimport \\\"./interfaces/ITimelockUtils.sol\\\";\\n\\n/// @title Contract that implements vesting functionality\\n/// @dev TimelockManager contracts interface with this contract to transfer\\n/// API3 tokens that are locked under a vesting schedule.\\nabstract contract TimelockUtils is ClaimUtils, ITimelockUtils {\\n\\n    string private constant INVALID_TIME_OR_AMOUNT =\\n    \\\"API3DAO.TimelockUtils: AMOUNT SHOULD BE GREATER THEN 0 AND releaseEnd > releaseStart\\\";\\n    string private constant ERROR_LOCKED_TOKENS = \\\"API3DAO.TimelockUtils: User shouldn't have timelocked tokens\\\";\\n    string private constant ERROR_BEFORE_RELEASE = \\\"API3DAO.TimelockUtils: Cannot update status before releaseStart\\\";\\n    string private constant ERROR_ZERO_AMOUNT = \\\"API3DAO.TimelockUtils: Locked amount should be greater than 0\\\";\\n\\n    struct Timelock\\n    {\\n        uint256 totalAmount;\\n        uint256 remainingAmount;\\n        uint256 releaseStart;\\n        uint256 releaseEnd;\\n    }\\n\\n    /// @notice Maps user addresses to TimelockManager contract addresses to\\n    /// timelocks\\n    /// @dev This implies that a user cannot have multiple timelocks\\n    /// transferrerd from the same TimelockManager contract. This is\\n    /// acceptable, because the TimelockManager is implemented in a way to not\\n    /// allow multiple timelocks per user.\\n    mapping(address => mapping(address => Timelock)) public userToDepositorToTimelock;\\n\\n    /// @notice Called by TimelockManager contracts to deposit tokens on behalf\\n    /// of a user on a linear vesting schedule\\n    /// @dev Refer to `TimelockManager.sol` to see how this is used\\n    /// @param source Token source\\n    /// @param amount Token amount\\n    /// @param userAddress Address of the user who will receive the tokens\\n    /// @param releaseStart Vesting schedule starting time\\n    /// @param releaseEnd Vesting schedule ending time\\n    function depositWithVesting(\\n        address source,\\n        uint256 amount,\\n        address userAddress,\\n        uint256 releaseStart,\\n        uint256 releaseEnd\\n        )\\n        external\\n        override\\n    {\\n        require(userToDepositorToTimelock[userAddress][msg.sender].remainingAmount == 0, ERROR_LOCKED_TOKENS);\\n        require(\\n            releaseEnd > releaseStart\\n                && amount != 0,\\n            INVALID_TIME_OR_AMOUNT\\n            );\\n        users[userAddress].unstaked = users[userAddress].unstaked + amount;\\n        users[userAddress].vesting = users[userAddress].vesting + amount;\\n        userToDepositorToTimelock[userAddress][msg.sender] = Timelock({\\n            totalAmount: amount,\\n            remainingAmount: amount,\\n            releaseStart: releaseStart,\\n            releaseEnd: releaseEnd\\n            });\\n        api3Token.transferFrom(source, address(this), amount);\\n        emit DepositedVesting(\\n            userAddress,\\n            amount,\\n            releaseStart,\\n            releaseEnd\\n            );\\n    }\\n\\n    /// @notice Called to release tokens vested by the timelock\\n    /// @param userAddress Address of the user whose timelock status will be\\n    /// updated\\n    /// @param timelockManagerAddress Address of the TimelockManager that has\\n    /// created the timelock\\n    function updateTimelockStatus(\\n        address userAddress,\\n        address timelockManagerAddress\\n        )\\n        external\\n        override\\n    {\\n        Timelock storage timelock = userToDepositorToTimelock[userAddress][timelockManagerAddress];\\n        require(block.timestamp > timelock.releaseStart, ERROR_BEFORE_RELEASE);\\n        require(timelock.remainingAmount > 0, ERROR_ZERO_AMOUNT);\\n        uint256 totalUnlocked;\\n        if (block.timestamp >= timelock.releaseEnd)\\n        {\\n            totalUnlocked = timelock.totalAmount;\\n        }\\n        else\\n        {\\n            uint256 passedTime = block.timestamp - timelock.releaseStart;\\n            uint256 totalTime = timelock.releaseEnd - timelock.releaseStart;\\n            totalUnlocked = timelock.totalAmount * passedTime / totalTime;\\n        }\\n        uint256 previouslyUnlocked = timelock.totalAmount - timelock.remainingAmount;\\n        uint256 newlyUnlocked = totalUnlocked - previouslyUnlocked;\\n        User storage user = users[userAddress];\\n        user.vesting = user.vesting - newlyUnlocked;\\n        uint256 newRemainingAmount = timelock.remainingAmount - newlyUnlocked;\\n        userToDepositorToTimelock[userAddress][timelockManagerAddress].remainingAmount = newRemainingAmount;\\n        emit UpdatedTimelock(\\n            userAddress,\\n            timelockManagerAddress,\\n            newRemainingAmount\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x0c833ca8962515a213a96912cb3d856ca494b9a60b63db6f28b6ddcd3d329a18\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/TransferUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./DelegationUtils.sol\\\";\\nimport \\\"./interfaces/ITransferUtils.sol\\\";\\n\\n/// @title Contract that implements token transfer functionality\\nabstract contract TransferUtils is DelegationUtils, ITransferUtils {\\n\\n    string private constant WRONG_TOTAL_FUNDS =\\n    \\\"API3DAO.TransferUtils: User total funds should be bigger then locked and amount to withdraw\\\";\\n    string private constant AMOUNT_TOO_BIG =\\n    \\\"API3DAO.TransferUtils: Withdrawal amount should be less or equal to the unstaked tokens\\\";\\n\\n    /// @notice Called to deposit tokens for a user by using `transferFrom()`\\n    /// @dev This method is used by `TimelockManager.sol`\\n    /// @param source Token transfer source\\n    /// @param amount Amount to be deposited\\n    /// @param userAddress User that the tokens will be deposited for\\n    function deposit(\\n        address source,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        public\\n        override\\n    {\\n        payReward();\\n        users[userAddress].unstaked = users[userAddress].unstaked + amount;\\n        api3Token.transferFrom(source, address(this), amount);\\n        emit Deposited(\\n            userAddress,\\n            amount\\n            );\\n    }\\n\\n    /// @notice Called to withdraw tokens\\n    /// @dev The user should call `getUserLocked()` beforehand to ensure that\\n    /// they have at least `amount` unlocked tokens to withdraw\\n    /// @param destination Token transfer destination\\n    /// @param amount Amount to be withdrawn\\n    function withdraw(\\n        address destination,\\n        uint256 amount\\n        )\\n        public\\n        override\\n    {\\n        payReward();\\n        User storage user = users[msg.sender];\\n        uint256 userLocked = getUserLocked(msg.sender);\\n        // Check if the user has `amount` unlocked tokens to withdraw\\n        uint256 lockedAndVesting = userLocked + user.vesting;\\n        uint256 userTotalFunds = user.unstaked + userStake(msg.sender);\\n        require(userTotalFunds >= lockedAndVesting + amount, WRONG_TOTAL_FUNDS);\\n        // Carry on with the withdrawal\\n        require(user.unstaked >= amount, AMOUNT_TOO_BIG);\\n        user.unstaked = user.unstaked - amount;\\n        api3Token.transfer(destination, amount);\\n        emit Withdrawn(msg.sender,\\n            destination,\\n            amount\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x505599d5da0e6887d32eae58e3b090fd7c05c64fdf47865ee7317f466428585b\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/auxiliary/interfaces/v0.8.4/IApi3Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IApi3Token is IERC20 {\\n    event MinterStatusUpdated(\\n        address indexed minterAddress,\\n        bool minterStatus\\n        );\\n\\n    event BurnerStatusUpdated(\\n        address indexed burnerAddress,\\n        bool burnerStatus\\n        );\\n\\n    function updateMinterStatus(\\n        address minterAddress,\\n        bool minterStatus\\n        )\\n        external;\\n\\n    function updateBurnerStatus(bool burnerStatus)\\n        external;\\n\\n    function mint(\\n        address account,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function burn(uint256 amount)\\n        external;\\n\\n    function getMinterStatus(address minterAddress)\\n        external\\n        view\\n        returns(bool minterStatus);\\n\\n    function getBurnerStatus(address burnerAddress)\\n        external\\n        view\\n        returns(bool burnerStatus);\\n}\\n\",\"keccak256\":\"0x6db058ca78f4189616c99be74cf4b3942655b7c5ef6e74775341b6d015ebd2a7\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/auxiliary/interfaces/v0.8.4/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xace3bf3f63de1956a7d1a16a145817f194a70448677c99cb03145b3803a5415f\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/IApi3Pool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./ITimelockUtils.sol\\\";\\n\\ninterface IApi3Pool is ITimelockUtils {\\n}\\n\",\"keccak256\":\"0xdda67642ffb7c353fc2593e7414ff2d31b241a2589a6edfadb9de33823f99fb3\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/IClaimUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IStakeUtils.sol\\\";\\n\\ninterface IClaimUtils is IStakeUtils {\\n    event PaidOutClaim(\\n        address indexed recipient,\\n        uint256 amount\\n        );\\n\\n    function payOutClaim(\\n        address recipient,\\n        uint256 amount\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0xe1c3c8e9534dcf4e3415e074816e2bf89db3f68490059785055cdf8ace0dbd0e\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/IDelegationUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IRewardUtils.sol\\\";\\n\\ninterface IDelegationUtils is IRewardUtils {\\n    event Delegated(\\n        address indexed user,\\n        address indexed delegate\\n        );\\n\\n    event Undelegated(\\n        address indexed user,\\n        address indexed delegate\\n        );\\n\\n    function delegateVotingPower(address delegate) \\n        external;\\n\\n    function undelegateVotingPower()\\n        external;\\n\\n    \\n}\\n\",\"keccak256\":\"0x00ce625506acb482d8d0ad4db7385ac42d2db72d45f6207ceeeacd82fc51a55c\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/IGetterUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IStateUtils.sol\\\";\\n\\ninterface IGetterUtils is IStateUtils {\\n    function balanceOfAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(uint256);\\n\\n    function balanceOf(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function totalSupplyOneBlockAgo()\\n        external\\n        view\\n        returns(uint256);\\n\\n    function totalSupply()\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userSharesAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userShares(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userSharesAtWithBinarySearch(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userStake(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function getReceivedDelegationAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userReceivedDelegation(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function getUserDelegateAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(address);\\n\\n    function getUserDelegate(address userAddress)\\n        external\\n        view\\n        returns(address);\\n\\n    function getUserLocked(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function getUser(address userAddress)\\n        external\\n        view\\n        returns(\\n            uint256 unstaked,\\n            uint256 vesting,\\n            uint256 unstakeShares,\\n            uint256 unstakeAmount,\\n            uint256 unstakeScheduledFor,\\n            uint256 mostRecentProposalTimestamp,\\n            uint256 mostRecentVoteTimestamp,\\n            uint256 mostRecentDelegationTimestamp,\\n            uint256 mostRecentUndelegationTimestamp\\n            );\\n}\\n\",\"keccak256\":\"0x01f2590736b0f054480bfc04e5619146ee0d5d8554a2ab316be5d5bdd7d90ed0\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/IRewardUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IGetterUtils.sol\\\";\\n\\ninterface IRewardUtils is IGetterUtils {\\n    event PaidReward(\\n        uint256 indexed epoch,\\n        uint256 rewardAmount,\\n        uint256 apr\\n        );\\n\\n    function payReward()\\n        external;\\n}\\n\",\"keccak256\":\"0xe6af1bf1abbbe8cf384cce9eaa52836350cca071ff56097555e3f4f4eb130358\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/IStakeUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./ITransferUtils.sol\\\";\\n\\ninterface IStakeUtils is ITransferUtils{\\n    event Staked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 totalShares\\n        );\\n\\n    event ScheduledUnstake(\\n        address indexed user,\\n        uint256 shares,\\n        uint256 amount,\\n        uint256 scheduledFor\\n        );\\n\\n    event Unstaked(\\n        address indexed user,\\n        uint256 amount\\n        );\\n\\n    function stake(uint256 amount)\\n        external;\\n\\n    function depositAndStake(\\n        address source,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function scheduleUnstake(uint256 shares)\\n        external;\\n\\n    function unstake(address userAddress)\\n        external\\n        returns(uint256);\\n\\n    function unstakeAndWithdraw(address destination)\\n        external;\\n}\\n\",\"keccak256\":\"0x20834dfbcceb24cd363d06d70346cc0ea90a94a694e768e851509beb2e1f95a1\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/IStateUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IStateUtils {\\n    event SetDaoApps(\\n        address agentAppPrimary,\\n        address agentAppSecondary,\\n        address votingAppPrimary,\\n        address votingAppSecondary\\n        );\\n\\n    event SetClaimsManagerStatus(\\n        address claimsManager,\\n        bool status\\n        );\\n\\n    event SetStakeTarget(\\n        uint256 oldTarget,\\n        uint256 newTarget\\n        );\\n\\n    event SetMaxApr(\\n        uint256 oldMaxApr,\\n        uint256 maxApr\\n        );\\n\\n    event SetMinApr(\\n        uint256 oldMinApr,\\n        uint256 minApr\\n        );\\n\\n    event SetUnstakeWaitPeriod(\\n        uint256 oldUnstakeWaitPeriod,\\n        uint256 unstakeWaitPeriod\\n        );\\n\\n    event SetAprUpdateStep(\\n        uint256 oldAprUpdateStep,\\n        uint256 aprUpdateStep\\n        );\\n\\n    event SetProposalVotingPowerThreshold(\\n        uint256 oldProposalVotingPowerThreshold,\\n        uint256 proposalVotingPowerThreshold\\n        );\\n\\n    event PublishedSpecsUrl(\\n        address indexed votingApp,\\n        uint256 indexed proposalIndex,\\n        address userAddress,\\n        string specsUrl\\n        );\\n\\n    event UpdatedLastVoteSnapshotBlock(\\n        address votingApp,\\n        uint256 lastVoteSnapshotBlock,\\n        uint256 lastVoteSnapshotBlockUpdateTimestamp\\n        );\\n\\n    function setDaoApps(\\n        address _agentAppPrimary,\\n        address _agentAppSecondary,\\n        address _votingAppPrimary,\\n        address _votingAppSecondary\\n        )\\n        external;\\n\\n    function setClaimsManagerStatus(\\n        address claimsManager,\\n        bool status\\n        )\\n        external;\\n\\n    function setStakeTarget(uint256 _stakeTarget)\\n        external;\\n\\n    function setMaxApr(uint256 _maxApr)\\n        external;\\n\\n    function setMinApr(uint256 _minApr)\\n        external;\\n\\n    function setUnstakeWaitPeriod(uint256 _unstakeWaitPeriod)\\n        external;\\n\\n    function setAprUpdateStep(uint256 _aprUpdateStep)\\n        external;\\n\\n    function setProposalVotingPowerThreshold(uint256 _proposalVotingPowerThreshold)\\n        external;\\n\\n    function updateLastVoteSnapshotBlock(uint256 snapshotBlock)\\n        external;\\n\\n    function updateMostRecentProposalTimestamp(address userAddress)\\n        external;\\n\\n    function updateMostRecentVoteTimestamp(address userAddress)\\n        external;\\n}\\n\",\"keccak256\":\"0x294c163427ecf50df184a8dfefeab7001ddfb749213ff0e220fde91064fb0bbd\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/ITimelockUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IClaimUtils.sol\\\";\\n\\ninterface ITimelockUtils is IClaimUtils {\\n    event DepositedVesting(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end\\n        );\\n\\n    event UpdatedTimelock(\\n        address indexed user,\\n        address indexed timelockManagerAddress,\\n        uint256 remainingAmount\\n        );\\n\\n    function depositWithVesting(\\n        address source,\\n        uint256 amount,\\n        address userAddress,\\n        uint256 releaseStart,\\n        uint256 releaseEnd\\n        )\\n        external;\\n\\n    function updateTimelockStatus(\\n        address userAddress,\\n        address timelockManagerAddress\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0xf4e6532e674ab107cde359db3c094917116fd63c901b8563c0f5269156cd3e00\",\"license\":\"MIT\"},\"contracts/pool-contracts-symlink/interfaces/ITransferUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IDelegationUtils.sol\\\";\\n\\ninterface ITransferUtils is IDelegationUtils{\\n    event Deposited(\\n        address indexed user,\\n        uint256 amount\\n        );\\n\\n    event Withdrawn(\\n        address indexed user,\\n        address indexed destination,\\n        uint256 amount\\n        );\\n\\n    function deposit(\\n        address source,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        external;\\n\\n    function withdraw(\\n        address destination,\\n        uint256 amount\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0x67e59e92e3f41cd74594765808289d013da7820c3e8ad894c018cfe0e13a3188\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103985760003560e01c80638b0e9f3f116101e9578063db6f162e1161010f578063ea26afd7116100ad578063f45346dc1161007c578063f45346dc146108dd578063f68308c7146108f0578063fc5da2aa14610903578063fcde28cc1461091657600080fd5b8063ea26afd714610891578063f2888dbb146108a4578063f3fef3a3146108b7578063f3ff955a146108ca57600080fd5b8063e3b34174116100e9578063e3b3417414610802578063e45bebc114610815578063e685dee014610875578063e7460a521461088857600080fd5b8063db6f162e146107d3578063de69b3aa146107dc578063e14b5fac146107ef57600080fd5b8063a694fc3a11610187578063acf9cafb11610156578063acf9cafb1461077d578063b3609b5314610790578063b70e6be614610799578063b8f05183146107c057600080fd5b8063a694fc3a146106f1578063a78c6ddc14610704578063a87430ba14610717578063ac4746ab1461077357600080fd5b80639745f563116101c35780639745f5631461069a578063975f2534146106cd5780639b9708b5146106d6578063a17824fe146106de57600080fd5b80638b0e9f3f146106755780638c3f3b3d1461067e57806392093b361461069157600080fd5b80634f322ae8116102ce57806368e5585d1161026c5780637842a3a41161023b5780637842a3a41461063e578063784b3c5d146106465780637fd638751461064f5780638482fbdb1461066257600080fd5b806368e5585d1461055b5780636f77926b1461056e57806370a0823114610618578063756b2a8b1461062b57600080fd5b80635856130a116102a85780635856130a1461051a578063613d517d146105225780636367f36f14610535578063681a9ad71461054857600080fd5b80634f322ae8146104eb57806352f52ddd146104f457806356d4a7fe1461050757600080fd5b80632cacc0cb1161033b5780633c37d05a116103155780633c37d05a1461047d5780634091fd3f146104855780634eb05c47146104cf5780634ee2cd7e146104d857600080fd5b80632cacc0cb14610444578063344965e214610457578063360c15d71461046a57600080fd5b8063106d08df11610377578063106d08df146103f557806314a0f06a1461040857806318160ddd1461041b5780632b2c22621461043157600080fd5b80626091871461039d578063054fbb84146103cd5780630b146517146103e2575b600080fd5b6003546103b0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103e06103db366004613173565b610929565b005b6103e06103f0366004613159565b610b33565b6103e06104033660046132fb565b610bae565b6103b061041636600461322e565b610d4c565b610423610e22565b6040519081526020016103c4565b6103e061043f3660046132fb565b610e31565b6103e061045236600461322e565b610ed2565b6002546103b0906001600160a01b031681565b6103e0610478366004613159565b611045565b6103e06110c0565b6104b46104933660046132fb565b60066020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016103c4565b610423600a5481565b6104236104e636600461322e565b611230565b61042360105481565b61042361050236600461322e565b611282565b6103e0610515366004613292565b6112ac565b610423603481565b6000546103b0906001600160a01b031681565b6103e0610543366004613159565b6114ec565b6001546103b0906001600160a01b031681565b610423610569366004613159565b611507565b6105d461057c366004613159565b6001600160a01b0316600090815260086020819052604090912060038101546004820154600583015460068401546007850154958501546009860154600a870154600b90970154959894979396929593949193909291565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e0830152610100820152610120016103c4565b610423610626366004613159565b611531565b6103e06106393660046132fb565b61153d565b6103e0611614565b610423600b5481565b6103e061065d3660046132fb565b6117f4565b6103b0610670366004613159565b6118fd565b61042360095481565b6103e061068c36600461322e565b611909565b610423600c5481565b6106bd6106a8366004613159565b60056020526000908152604090205460ff1681565b60405190151581526020016103c4565b61042360075481565b61042361191d565b6104236106ec366004613159565b611927565b6103e06106ff3660046132fb565b611933565b6103e06107123660046131a5565b611aac565b6105d4610725366004613159565b600860205280600052604060002060009150905080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a01549080600b0154905089565b61042362093a8081565b61042361078b36600461322e565b611c21565b610423600f5481565b6104237f000000000000000000000000000000000000000000000000000000000000000081565b6103e06107ce3660046132fb565b611cfb565b610423600d5481565b6104236107ea366004613159565b611db0565b6104236107fd366004613159565b611dbc565b6103e06108103660046132fb565b611f49565b610855610823366004613173565b601760209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016103c4565b6004546103b0906001600160a01b031681565b610423600e5481565b6103e061089f3660046132fb565b612020565b6104236108b2366004613159565b6120fd565b6103e06108c536600461322e565b6122b5565b6103e06108d8366004613159565b612471565b6103e06108eb366004613257565b612764565b6103e06108fe3660046131f8565b61287d565b61042361091136600461322e565b612921565b6103e06109243660046132fb565b612944565b600060176000846001600160a01b03166001600160a01b031681526020019081526020016000206000836001600160a01b03166001600160a01b031681526020019081526020016000209050806002015442116040518060600160405280603f81526020016135b1603f9139906109bc5760405162461bcd60e51b81526004016109b3919061332b565b60405180910390fd5b5060008160010154116040518060600160405280603d8152602001613b09603d9139906109fc5760405162461bcd60e51b81526004016109b3919061332b565b50600081600301544210610a1257508054610a5e565b6000826002015442610a2491906133d5565b9050600083600201548460030154610a3c91906133d5565b905080828560000154610a4f91906133b6565b610a599190613396565b925050505b60018201548254600091610a71916133d5565b90506000610a7f82846133d5565b6001600160a01b0387166000908152600860205260409020600481015491925090610aab9083906133d5565b60048201556001850154600090610ac39084906133d5565b6001600160a01b038981166000818152601760209081526040808320948d16808452948252918290206001018590559051848152939450919290917f760cee05d81d0fd6dddc4db40caa8754661e5fb9f9910b9b2390e43c728d1816910160405180910390a35050505050505050565b6003546001600160a01b0316331480610b5657506004546001600160a01b031633145b60405180608001604052806047815260200161356a6047913990610b8d5760405162461bcd60e51b81526004016109b3919061332b565b506001600160a01b0316600090815260086020526040902042600990910155565b610bb6611614565b6000610bc133611db0565b9050818110156040518060800160405280605581526020016138a26055913990610bfe5760405162461bcd60e51b81526004016109b3919061332b565b50600060086000336001600160a01b03166001600160a01b0316815260200190815260200160002090508060070154600014604051806060016040528060398152602001613ad06039913990610c675760405162461bcd60e51b81526004016109b3919061332b565b506000610c72612a09565b600954610c7f90866133b6565b610c899190613396565b9050600e5442610c99919061337e565b6007830155600682018190556005820184905560408051808201909152438152829060208101610cc987876133d5565b905281546001818101845560009384526020808520845160029094020192835590920151910155610cfd9033908690612a26565b600782015460408051868152602081018490529081019190915233907f06fbd2297e6f6f7701a9cf99685a6af911cab275ec5c75ac7aaaf13b5cf3d61f9060600160405180910390a250505050565b6001600160a01b038216600090815260086020526040812060010180545b8015610e15578382610d7d6001846133d5565b81548110610d9b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015411610e035781610dbe6001836133d5565b81548110610ddc57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160029092020101546001600160a01b03169250610e1c915050565b80610e0d816133ec565b915050610d6a565b5060009150505b92915050565b6000610e2c612a09565b905090565b6001546001600160a01b0316331480610e5457506002546001600160a01b031633145b60405180608001604052806046815260200161362a6046913990610e8b5760405162461bcd60e51b81526004016109b3919061332b565b50600d80549082905560408051828152602081018490527f5f178a2bb03cf548ef21d032b0266242c3ca1585ff5d05eb9a5c4c94a70f99b791015b60405180910390a15050565b3360009081526005602090815260409182902054825160808101909352604880845260ff90911692916136709083013990610f205760405162461bcd60e51b81526004016109b3919061332b565b50610f29611614565b806009541160405180608001604052806042815260200161347f6042913990610f655760405162461bcd60e51b81526004016109b3919061332b565b5080600954610f7491906133d5565b60095560005460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610fc557600080fd5b505af1158015610fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffd91906132df565b50816001600160a01b03167f69012b8bdee54006564cf8bf08b89cccd4d86713e4ebc2443760c02fe9a9a0928260405161103991815260200190565b60405180910390a25050565b6003546001600160a01b031633148061106857506004546001600160a01b031633145b60405180608001604052806047815260200161356a604791399061109f5760405162461bcd60e51b81526004016109b3919061332b565b506001600160a01b0316600090815260086020819052604090912042910155565b6110c8611614565b336000818152600860205260408120916110e1906118fd565b905060006001600160a01b0316816001600160a01b031614156040518060600160405280603781526020016137a160379139906111315760405162461bcd60e51b81526004016109b3919061332b565b5061113f62093a80426133d5565b82600a015411158015611162575061115a62093a80426133d5565b82600b015411155b6040518060800160405280604a8152602001613a86604a9139906111995760405162461bcd60e51b81526004016109b3919061332b565b5060006111a533611db0565b6001600160a01b03831660009081526008602052604090209091506111e060028201836111d186611927565b6111db91906133d5565b612ab5565b6111ee846001016000612b8c565b42600b8501556040516001600160a01b0384169033907f1af5b1c85495b3618ea659a1ba256c8b8974b437297d3b914e321e086a28da7290600090a350505050565b60008061123d8484610d4c565b6001600160a01b03161461125357506000610e1c565b600061125f8484612921565b9050600061126d8585611c21565b9050611279818361337e565b95945050505050565b6001600160a01b03821660009081526008602052604081206112a5908383612cbe565b9392505050565b6001600160a01b038316600090815260176020908152604080832033845282529182902060010154825160608101909352603c80845290159291613b46908301399061130b5760405162461bcd60e51b81526004016109b3919061332b565b50818111801561131a57508315155b60405180608001604052806054815260200161351660549139906113515760405162461bcd60e51b81526004016109b3919061332b565b506001600160a01b03831660009081526008602052604090206003015461137990859061337e565b6001600160a01b03841660009081526008602052604090206003810191909155600401546113a890859061337e565b6001600160a01b03848116600081815260086020908152604080832060049081019690965580516080810182528a81528083018b81528183018a8152606083018a815296865260178552838620338752909452828520915182555160018201559151600283015592516003909101555490516323b872dd60e01b8152888316938101939093523060248401526044830187905216906323b872dd90606401602060405180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149891906132df565b5060408051858152602081018490529081018290526001600160a01b038416907f4d2c5169b0ade12232f4f69bf95492a67a25767a255e750d3bc5c7505a4ec0da9060600160405180910390a25050505050565b60006114f7336120fd565b905061150382826122b5565b5050565b6000611511612a09565b60095461151d84611db0565b61152791906133b6565b610e1c9190613396565b6000610e1c8243611230565b6001546001600160a01b031633148061156057506002546001600160a01b031633145b60405180608001604052806046815260200161362a60469139906115975760405162461bcd60e51b81526004016109b3919061332b565b50600c5481111560405180606001604052806039815260200161380e60399139906115d55760405162461bcd60e51b81526004016109b3919061332b565b50600b80549082905560408051828152602081018490527fb716ede46671849441c512fd11a9c5a2dc35c8e2527f276d423088a871be09e19101610ec6565b600061162362093a8042613396565b90508060075410156117f15760005460405163bbb30c5d60e01b81523060048201526001600160a01b039091169063bbb30c5d9060240160206040518083038186803b15801561167257600080fd5b505afa158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa91906132df565b156117eb576116b7612ec6565b6000670de0b6b3a764000060346010546009546116d491906133b6565b6116de9190613396565b6116e89190613396565b90506040518060600160405280438152602001828152602001611709612a09565b9052600083815260066020908152604080832084518155918401516001830155928301516002909101555490516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561177c57600080fd5b505af1158015611790573d6000803e3d6000fd5b50505050806009546117a2919061337e565b60095560105460405183917f460c3d9eee711013ca19dcb5315db471a382857fbd2d4361958a465c93bf9aad916117e191858252602082015260400190565b60405180910390a2505b60078190555b50565b6001546040805160808101909152604e8082526001600160a01b0390921633149161375360208301399061183b5760405162461bcd60e51b81526004016109b3919061332b565b50600a6118516064670de0b6b3a7640000613396565b61185b9190613396565b811015801561188757506118786064670de0b6b3a7640000613396565b61188390600a6133b6565b8111155b6040518060600160405280603681526020016137d860369139906118be5760405162461bcd60e51b81526004016109b3919061332b565b50600f80549082905560408051828152602081018490527fc0f8b066382313a28d6946c6b16228545528bfc5bdf98fcc5c481aa0c85654ef9101610ec6565b6000610e1c8243610d4c565b611914828233612764565b61150381611933565b6000610e2c612fe7565b6000610e1c8243611c21565b61193b611614565b600060086000336001600160a01b03166001600160a01b03168152602001908152602001600020905081816003015410156040518060800160405280605581526020016134c160559139906119a35760405162461bcd60e51b81526004016109b3919061332b565b508181600301546119b491906133d5565b600382015560006119c3612a09565b9050600060095484836119d691906133b6565b6119e09190613396565b905060006119ed33611db0565b90508360000160405180604001604052804381526020018484611a10919061337e565b905281546001818101845560009384526020808520845160029094020192835590920151910155611a41838561337e565b9050611a4c81613014565b85600954611a5a919061337e565b600955611a6933846001612a26565b604080518781526020810183905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2505050505050565b6001546001600160a01b03161580611ace57506001546001600160a01b031633145b60405180608001604052806046815260200161362a6046913990611b055760405162461bcd60e51b81526004016109b3919061332b565b506001600160a01b03841615801590611b2657506001600160a01b03831615155b8015611b3a57506001600160a01b03821615155b8015611b4e57506001600160a01b03811615155b604051806060016040528060308152602001613b826030913990611b855760405162461bcd60e51b81526004016109b3919061332b565b50600180546001600160a01b038681166001600160a01b031992831681179093556002805487831690841681179091556003805487841690851681179091556004805493871693909416831790935560408051948552602085019190915283019190915260608201527f71b1ce304e98c2a645f0c32f4c9e3ae4d5dbe6717a8c17ccefb0083635afdc159060800160405180910390a150505050565b6001600160a01b038216600090815260086020526040812060020180546005916103e891831115611c6257611c5881866000613050565b9350505050610e1c565b8054600090611c729085906133d5565b905085828281548110611c9557634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001541015611cc357611cb8828783613050565b945050505050610e1c565b81546000908410611cd5576000611ce2565b8254611ce29085906133d5565b9050611cef838883612cbe565b98975050505050505050565b6003546001600160a01b0316331480611d1e57506004546001600160a01b031633145b60405180608001604052806047815260200161356a6047913990611d555760405162461bcd60e51b81526004016109b3919061332b565b506011819055600081815260126020908152604091829020429081905582513381529182018490528183015290517ff1e6ba87fa2be9c4c96e901e65cf0909457dc8a11cbed4280387501fade7f3b19181900360600190a150565b6000610e1c8243612921565b6001600160a01b038116600090815260086020526040812081611de262093a8042613396565b905060007f0000000000000000000000000000000000000000000000000000000000000000611e126034846133d5565b11611e4757611e427f0000000000000000000000000000000000000000000000000000000000000000600161337e565b611e5d565b611e526034836133d5565b611e5d90600161337e565b8354909150611e7157506000949350505050565b8254600090611e82906001906133d5565b9050825b828110611f3f576000818152600660205260409020805415611f2c575b6000868481548110611ec557634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020190508160000154816000015411611f1957816002015481600101548360010154611efd91906133b6565b611f079190613396565b611f11908961337e565b975050611f2c565b5082611f24816133ec565b935050611ea3565b5080611f37816133ec565b915050611e86565b5050505050919050565b6001546001600160a01b0316331480611f6c57506002546001600160a01b031633145b60405180608001604052806046815260200161362a6046913990611fa35760405162461bcd60e51b81526004016109b3919061332b565b50600b5481101560405180606001604052806039815260200161380e6039913990611fe15760405162461bcd60e51b81526004016109b3919061332b565b50600c80549082905560408051828152602081018490527f5fcfc26d11c92c09c71d9eae2b49aea32896b4203b9b9ec08b3d13e574eb5ec39101610ec6565b6001546001600160a01b031633148061204357506002546001600160a01b031633145b60405180608001604052806046815260200161362a604691399061207a5760405162461bcd60e51b81526004016109b3919061332b565b50670de0b6b3a76400008111156040518060600160405280603a81526020016135f0603a9139906120be5760405162461bcd60e51b81526004016109b3919061332b565b50600a80549082905560408051828152602081018490527f700ec58170a757bdf5c02a43e18d9708f88d1159fc6eb3b446f421dfe769ef369101610ec6565b6000612107611614565b600060086000846001600160a01b03166001600160a01b0316815260200190815260200160002090508060070154600014156040518060600160405280603c815260200161394d603c9139906121705760405162461bcd60e51b81526004016109b3919061332b565b5042816007015410604051806060016040528060398152602001613a1960399139906121af5760405162461bcd60e51b81526004016109b3919061332b565b5060006121ba612a09565b905060008260060154905060008260095485600501546121da91906133b6565b6121e49190613396565b905060008183116121f557826121f7565b815b9050600954811061221657600160095461221191906133d5565b612218565b805b905080856003015461222a919061337e565b600386015560058501546122479061224290866133d5565b613014565b8060095461225591906133d5565b6009556000600586018190556006860181905560078601556040518181526001600160a01b038816907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a29695505050505050565b6122bd611614565b336000818152600860205260408120916122d690611dbc565b905060008260040154826122ea919061337e565b905060006122f733611507565b8460030154612306919061337e565b9050612312858361337e565b8110156040518060800160405280605b8152602001613847605b91399061234c5760405162461bcd60e51b81526004016109b3919061332b565b508484600301541015604051806080016040528060578152602001613428605791399061238c5760405162461bcd60e51b81526004016109b3919061332b565b5084846003015461239d91906133d5565b600385015560005460405163a9059cbb60e01b81526001600160a01b038881166004830152602482018890529091169063a9059cbb90604401602060405180830381600087803b1580156123f057600080fd5b505af1158015612404573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242891906132df565b506040518581526001600160a01b0387169033907fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb9060200160405180910390a3505050505050565b612479611614565b6001600160a01b0381161580159061249a57506001600160a01b0381163314155b80156124b7575060006124ac826118fd565b6001600160a01b0316145b6040518060a00160405280606481526020016136b860649139906124ee5760405162461bcd60e51b81526004016109b3919061332b565b5033600090815260086020526040902061250b62093a80426133d5565b81600a01541115801561252e575061252662093a80426133d5565b81600b015411155b6040518060800160405280604a8152602001613a86604a9139906125655760405162461bcd60e51b81526004016109b3919061332b565b5061257362093a80426133d5565b816008015411158015612596575061258e62093a80426133d5565b816009015411155b6040518060800160405280605681526020016138f760569139906125cd5760405162461bcd60e51b81526004016109b3919061332b565b5042600a82015560006125df33611db0565b905060006125ec336118fd565b905060008211604051806060016040528060348152602001613a5260349139906126295760405162461bcd60e51b81526004016109b3919061332b565b50836001600160a01b0316816001600160a01b0316141560405180606001604052806037815260200161371c60379139906126775760405162461bcd60e51b81526004016109b3919061332b565b506001600160a01b038116156126e7576001600160a01b03811660009081526008602052604090206126b090600201836111d184611927565b6040516001600160a01b0382169033907f1af5b1c85495b3618ea659a1ba256c8b8974b437297d3b914e321e086a28da7290600090a35b6001600160a01b038416600090815260086020526040902061271a600282018461271088611927565b6111db919061337e565b6127278460010186612b8c565b6040516001600160a01b0386169033907f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea290600090a35050505050565b61276c611614565b6001600160a01b03811660009081526008602052604090206003015461279390839061337e565b6001600160a01b03828116600090815260086020526040808220600301939093555491516323b872dd60e01b81528582166004820152306024820152604481018590529116906323b872dd90606401602060405180830381600087803b1580156127fc57600080fd5b505af1158015612810573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283491906132df565b50806001600160a01b03167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c48360405161287091815260200190565b60405180910390a2505050565b6001546040805160808101909152604e8082526001600160a01b039092163314916137536020830139906128c45760405162461bcd60e51b81526004016109b3919061332b565b506001600160a01b038216600081815260056020908152604091829020805460ff19168515159081179091558251938452908301527fbf0d659300b2b4f4ddd43c45c5f2a7deafbf3e8bc8617173b6ef8937b19ca3219101610ec6565b6001600160a01b03821660009081526008602052604081206112a5908383613050565b6001546040805160808101909152604e8082526001600160a01b0390921633149161375360208301399061298b5760405162461bcd60e51b81526004016109b3919061332b565b5062093a808110156040518060800160405280604c81526020016139cd604c9139906129ca5760405162461bcd60e51b81526004016109b3919061332b565b50600e80549082905560408051828152602081018490527f2a566195a06f0ea25345d21a827d0a95deae8b4cb308a2c85c89deb35071aff99101610ec6565b6015546013546000911115612a1f575060165490565b5060145490565b6000612a31846118fd565b90506001600160a01b038116612a475750505050565b6001600160a01b038116600090815260086020526040812090612a6983611927565b905060008415612a8457612a7d868361337e565b9050612a9f565b858211612a92576000612a9c565b612a9c86836133d5565b90505b612aac8360020182612ab5565b50505050505050565b8154612af8576040805180820190915260115481526020808201928352835460018082018655600095865291909420915160029094029091019283559051910155565b81546000908390612b0b906001906133d5565b81548110612b2957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905060115481600001541015612b8557506040805180820190915260115481526020808201928352835460018082018655600095865291909420915160029094029091019283559051910155565b6001015550565b8154612bee576040805180820190915260115481526001600160a01b0391821660208083019182528454600180820187556000968752919095209251600290950290920193845551920180546001600160a01b03191692909116919091179055565b81546000908390612c01906001906133d5565b81548110612c1f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201905060115481600001541015612c9a57506040805180820190915260115481526001600160a01b0391821660208083019182528454600180820187556000968752919095209251600290950290920193845551920180546001600160a01b03191692909116919091179055565b6001810180546001600160a01b0384166001600160a01b0319909116179055505050565b8254600090612ccf575060006112a5565b83548210612ced57634e487b7160e01b600052600160045260246000fd5b83548490612cfd906001906133d5565b81548110612d1b57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600001548310612d7a5783548490612d43906001906133d5565b81548110612d6157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015490506112a5565b838281548110612d9a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154831015612df25781612dc0575060006112a5565b6040518060800160405280604481526020016139896044913960405162461bcd60e51b81526004016109b3919061332b565b83548290600090612e05906001906133d5565b90505b81811115612e895760006002612e1e848461337e565b612e2990600161337e565b612e339190613396565b905085878281548110612e5657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015411612e7557809250612e83565b612e806001826133d5565b91505b50612e08565b858281548110612ea957634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154925050509392505050565b60008060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f1557600080fd5b505afa158015612f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4d9190613313565b670de0b6b3a7640000600954612f6391906133b6565b612f6d9190613396565b9050600a54811115612fa357600d5460105411612f8b576000612f9b565b600d54601054612f9b91906133d5565b601055612fbd565b600d5460106000828254612fb7919061337e565b90915550505b600c546010541115612fd257600c5460105550565b600b5460105410156117f157600b5460105550565b601554600090431415612ffb575060145490565b60135443141561300c575060165490565b610e2c612a09565b60135443141561302357601455565b60155443141561303257601655565b60155460135410156130475743601355601455565b43601555601655565b82546000905b828111156130f657838561306b6001846133d5565b8154811061308957634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154116130e457846130ac6001836133d5565b815481106130ca57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101549150506112a5565b806130ee816133ec565b915050613056565b8060001460405180608001604052806044815260200161398960449139906131315760405162461bcd60e51b81526004016109b3919061332b565b50600095945050505050565b80356001600160a01b038116811461315457600080fd5b919050565b60006020828403121561316a578081fd5b6112a58261313d565b60008060408385031215613185578081fd5b61318e8361313d565b915061319c6020840161313d565b90509250929050565b600080600080608085870312156131ba578182fd5b6131c38561313d565b93506131d16020860161313d565b92506131df6040860161313d565b91506131ed6060860161313d565b905092959194509250565b6000806040838503121561320a578182fd5b6132138361313d565b9150602083013561322381613419565b809150509250929050565b60008060408385031215613240578182fd5b6132498361313d565b946020939093013593505050565b60008060006060848603121561326b578283fd5b6132748461313d565b9250602084013591506132896040850161313d565b90509250925092565b600080600080600060a086880312156132a9578081fd5b6132b28661313d565b9450602086013593506132c76040870161313d565b94979396509394606081013594506080013592915050565b6000602082840312156132f0578081fd5b81516112a581613419565b60006020828403121561330c578081fd5b5035919050565b600060208284031215613324578081fd5b5051919050565b6000602080835283518082850152825b818110156133575785810183015185820160400152820161333b565b818111156133685783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561339157613391613403565b500190565b6000826133b157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156133d0576133d0613403565b500290565b6000828210156133e7576133e7613403565b500390565b6000816133fb576133fb613403565b506000190190565b634e487b7160e01b600052601160045260246000fd5b80151581146117f157600080fdfe4150493344414f2e5472616e736665725574696c733a205769746864726177616c20616d6f756e742073686f756c64206265206c657373206f7220657175616c20746f2074686520756e7374616b656420746f6b656e734150493344414f2e436c61696d5574696c733a20546f74616c207374616b652073686f756c6420626520626967676572207468656e20636c61696d20616d6f756e744150493344414f2e5374616b655574696c733a205573657220646f6e2774206861766520656e6f75676820746f6b656e20746f207374616b652f756e7374616b65207468652070726f766964656420616d6f756e744150493344414f2e54696d656c6f636b5574696c733a20414d4f554e542053484f554c442042452047524541544552205448454e203020414e442072656c65617365456e64203e2072656c6561736553746172744150493344414f2e53746174655574696c733a204f6e6c7920566f74696e672061707020697320616c6c6f77656420746f206578656375746520746869732066756e6374696f6e4150493344414f2e54696d656c6f636b5574696c733a2043616e6e6f742075706461746520737461747573206265666f72652072656c6561736553746172744150493344414f2e53746174655574696c733a2050657263656e746167652073686f756c64206265206265747765656e203020616e64203130304150493344414f2e53746174655574696c733a204f6e6c79204167656e742061707020697320616c6c6f77656420746f206578656375746520746869732066756e6374696f6e4150493344414f2e436c61696d5574696c733a204f6e6c7920636c61696d206d616e6167657220697320616c6c6f77656420746f20706572666f726d207468697320616374696f6e4150493344414f2e44656c65676174696f6e5574696c733a2043616e6e6f742064656c656761746520746f20796f757273656c66206f72207a65726f206164647265737320616e6420696620796f7527766520616c72656164792064656c6567617465644150493344414f2e53746174655574696c733a2043616e6e6f742064656c656761746520746f207468652073616d6520616464726573734150493344414f2e53746174655574696c733a204f6e6c79207072696d617279204167656e742061707020697320616c6c6f77656420746f206578656375746520746869732066756e6374696f6e4150493344414f2e44656c65676174696f6e5574696c733a2054686973206164647265737320686173206e6f742064656c6567617465644150493344414f2e53746174655574696c733a205468726573686f6c642073686f756c64206265206c6f776572207468656e203130254150493344414f2e53746174655574696c733a204d6178204150522073686f756c6420626520626967676572207468616e206d696e206170724150493344414f2e5472616e736665725574696c733a205573657220746f74616c2066756e64732073686f756c6420626520626967676572207468656e206c6f636b656420616e6420616d6f756e7420746f2077697468647261774150493344414f2e5374616b655574696c733a205573657220646f6e2774206861766520656e6f75676820706f6f6c2073686172657320746f20756e7374616b65207468652070726f766964656420616d6f756e744150493344414f2e44656c65676174696f6e5574696c733a2054686973206164647265737320766f746564206f72206d61646520612070726f706f73616c206c657373207468616e2061207765656b206265666f72654150493344414f2e5374616b655574696c733a205573657220686173206e6f207363686564756c656420756e7374616b6520746f20657865637574654150493344414f2e4765747465725574696c733a2056616c75652063616e6e6f7420626520666f756e642061667465722070726f766964656420636865636b706f696e744150493344414f2e53746174655574696c733a2053686f756c64207761697420666f722074696d6520626967676572207468616e2045504f43485f4c454e47544820746f20756e7374616b654150493344414f2e5374616b655574696c733a205363686564756c656420756e7374616b6520686173206e6f74206d617475726564207965744150493344414f2e44656c65676174696f6e5574696c733a2043616e6e6f742064656c6567617465207a65726f207368617265734150493344414f2e44656c65676174696f6e5574696c733a2054686973206164647265737320756e2f64656c656761746564206c657373207468616e2061207765656b206265666f72654150493344414f2e5374616b655574696c733a20557365722068617320616c7265616479207363686564756c656420616e20756e7374616b654150493344414f2e54696d656c6f636b5574696c733a204c6f636b656420616d6f756e742073686f756c642062652067726561746572207468616e20304150493344414f2e54696d656c6f636b5574696c733a20557365722073686f756c646e277420686176652074696d656c6f636b656420746f6b656e734150493344414f2e53746174655574696c733a204164647265737365732073686f756c64206e6f742062652030783030a2646970667358221220913ff9c8df6c905db0dec3d22c845e594d8ecbce634eca59f4e44e2a1296f3a464736f6c63430008040033",
  "devdoc": {
    "details": "Functionalities of the contract are distributed to files that form a chain of inheritance: (1) Api3Pool.sol (2) TimelockUtils.sol (3) ClaimUtils.sol (4) StakeUtils.sol (5) TransferUtils.sol (6) DelegationUtils.sol (7) RewardUtils.sol (8) GetterUtils.sol (9) StateUtils.sol",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "This method is used to implement the MiniMe interface for the Api3Voting app",
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current voting power of the user"
        }
      },
      "balanceOfAt(address,uint256)": {
        "details": "This method is used to implement the MiniMe interface for the Api3Voting app",
        "params": {
          "_block": "Block number for which the query is being made for",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Voting power of the user at the block"
        }
      },
      "constructor": {
        "params": {
          "api3TokenAddress": "API3 token contract address"
        }
      },
      "delegateVotingPower(address)": {
        "params": {
          "delegate": "User address the voting power will be delegated to"
        }
      },
      "deposit(address,uint256,address)": {
        "details": "This method is used by `TimelockManager.sol`",
        "params": {
          "amount": "Amount to be deposited",
          "source": "Token transfer source",
          "userAddress": "User that the tokens will be deposited for"
        }
      },
      "depositAndStake(address,uint256)": {
        "details": "Due to the `deposit()` interface, `userAddress` can only be the caller",
        "params": {
          "amount": "Amount to be deposited and staked",
          "source": "Token transfer source"
        }
      },
      "depositWithVesting(address,uint256,address,uint256,uint256)": {
        "details": "Refer to `TimelockManager.sol` to see how this is used",
        "params": {
          "amount": "Token amount",
          "releaseEnd": "Vesting schedule ending time",
          "releaseStart": "Vesting schedule starting time",
          "source": "Token source",
          "userAddress": "Address of the user who will receive the tokens"
        }
      },
      "getReceivedDelegationAt(address,uint256)": {
        "details": "`user.delegatedTo` cannot have grown more than 1000 checkpoints in the last epoch due to `proposalVotingPowerThreshold` having a lower limit of 0.1%.",
        "params": {
          "_block": "Block number for which the query is being made for",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Voting power delegated to the user at the block"
        }
      },
      "getUser(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "mostRecentDelegationTimestamp": "Time when the user made their most recent delegation",
          "mostRecentProposalTimestamp": "Time when the user made their most recent proposal",
          "mostRecentUndelegationTimestamp": "Time when the user made their most recent undelegation",
          "mostRecentVoteTimestamp": "Time when the user cast their most recent vote",
          "unstakeAmount": "Amount scheduled to unstake",
          "unstakeScheduledFor": "Time unstaking is scheduled for",
          "unstakeShares": "Shares scheduled to unstake",
          "unstaked": "Amount of unstaked API3 tokens",
          "vesting": "Amount of API3 tokens locked by vesting"
        }
      },
      "getUserDelegate(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current delegate of the user"
        }
      },
      "getUserDelegateAt(address,uint256)": {
        "details": "Starts from the most recent value in `user.delegates` and searches backwards one element at a time. If `_block` is within `EPOCH_LENGTH`, this call is guaranteed to find the value among the last 2 elements because a user cannot update delegate more frequently than once an `EPOCH_LENGTH`.",
        "params": {
          "_block": "Block number",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Delegate of the user at the specific block"
        }
      },
      "getUserLocked(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "locked": "Current locked tokens of the user"
        }
      },
      "payOutClaim(address,uint256)": {
        "details": "The claims manager is a trusted contract that is allowed to withdraw as many tokens as it wants from the pool to pay out insurance claims. Any kind of limiting logic (e.g., maximum amount of tokens that can be withdrawn) is implemented at its end and is out of the scope of this contract. This will revert if the pool does not have enough funds.",
        "params": {
          "amount": "Amount of tokens that will be paid out",
          "recipient": "Recipient of the claim"
        }
      },
      "payReward()": {
        "details": "Skips past epochs for which rewards have not been paid for. Skips the reward payment if the pool is not authorized to mint tokens. Neither of these conditions will occur in practice."
      },
      "scheduleUnstake(uint256)": {
        "details": "While scheduling an unstake, `shares` get deducted from the user, meaning that they will not receive rewards or voting power for them any longer. At unstaking-time, the user unstakes either the amount of tokens `shares` corresponds to at scheduling-time, or the amount of tokens `shares` corresponds to at unstaking-time, whichever is smaller. This corresponds to tokens being scheduled to be unstaked not receiving any rewards, but being subject to claim payouts. In the instance that a claim has been paid out before an unstaking is executed, the user may potentially receive rewards during `unstakeWaitPeriod` (but not if there has not been a claim payout) but the amount of tokens that they can unstake will not be able to exceed the amount they scheduled the unstaking for.",
        "params": {
          "shares": "Amount of shares to be burned to unstake tokens"
        }
      },
      "setAprUpdateStep(uint256)": {
        "details": "aprUpdateStep can be 0% or 100%+",
        "params": {
          "_aprUpdateStep": "APR update steps"
        }
      },
      "setClaimsManagerStatus(address,bool)": {
        "details": "The claims manager is a trusted contract that is allowed to withdraw as many tokens as it wants from the pool to pay out insurance claims. Only the primary Agent can do this because it is a critical operation.",
        "params": {
          "claimsManager": "Claims manager contract address",
          "status": "Authorization status"
        }
      },
      "setDaoApps(address,address,address,address)": {
        "details": "This can also be called later on by the primary Agent to update all app addresses as a means of upgrade",
        "params": {
          "_agentAppPrimary": "Address of the primary Agent",
          "_agentAppSecondary": "Address of the secondary Agent",
          "_votingAppPrimary": "Address of the primary Api3Voting",
          "_votingAppSecondary": "Address of the secondary Api3Voting"
        }
      },
      "setMaxApr(uint256)": {
        "params": {
          "_maxApr": "Maximum APR"
        }
      },
      "setMinApr(uint256)": {
        "params": {
          "_minApr": "Minimum APR"
        }
      },
      "setProposalVotingPowerThreshold(uint256)": {
        "details": "Proposal voting power is limited between 0.1% and 10%. 0.1% is to ensure that no more than 1000 proposals can be made within an epoch (see `getReceivedDelegationAt()`) and any value above 10% is certainly an error.",
        "params": {
          "_proposalVotingPowerThreshold": "Voting power threshold for proposals"
        }
      },
      "setStakeTarget(uint256)": {
        "params": {
          "_stakeTarget": "Stake target"
        }
      },
      "setUnstakeWaitPeriod(uint256)": {
        "details": "This may want to be increased to provide more time for insurance claims to be resolved. Even when the insurance functionality is not implemented, the minimum valid value is `EPOCH_LENGTH` to prevent users from unstaking, withdrawing and staking with another address to work around the proposal spam protection. Only the primary Agent can do this because it is a critical operation.",
        "params": {
          "_unstakeWaitPeriod": "Unstake waiting period"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "Amount of tokens to stake"
        }
      },
      "totalSupply()": {
        "details": "This method is used to implement the MiniMe interface for the Aragon Voting app",
        "returns": {
          "_0": "Current total voting power"
        }
      },
      "totalSupplyOneBlockAgo()": {
        "details": "This method is used to implement the MiniMe interface for the Api3Voting app",
        "returns": {
          "_0": "Total voting power one block ago"
        }
      },
      "unstake(address)": {
        "details": "Anyone can execute a mature scheduled unstake",
        "params": {
          "userAddress": "Address of the user whose scheduled unstaking will be executed"
        },
        "returns": {
          "_0": "Amount of tokens that are unstaked"
        }
      },
      "unstakeAndWithdraw(address)": {
        "details": "Note that withdraw may revert because the user may have less than `unstaked` tokens that are withdrawable",
        "params": {
          "destination": "Token transfer destination"
        }
      },
      "updateLastVoteSnapshotBlock(uint256)": {
        "params": {
          "snapshotBlock": "Last vote snapshot block number"
        }
      },
      "updateMostRecentProposalTimestamp(address)": {
        "params": {
          "userAddress": "User address"
        }
      },
      "updateMostRecentVoteTimestamp(address)": {
        "params": {
          "userAddress": "User address"
        }
      },
      "updateTimelockStatus(address,address)": {
        "params": {
          "timelockManagerAddress": "Address of the TimelockManager that has created the timelock",
          "userAddress": "Address of the user whose timelock status will be updated"
        }
      },
      "userReceivedDelegation(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current voting power delegated to the user"
        }
      },
      "userShares(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current pool shares of the user"
        }
      },
      "userSharesAt(address,uint256)": {
        "details": "Starts from the most recent value in `user.shares` and searches backwards one element at a time",
        "params": {
          "_block": "Block number for which the query is being made for",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Pool shares of the user at the block"
        }
      },
      "userSharesAtWithBinarySearch(address,uint256)": {
        "details": "This method is not used by the current iteration of the DAO/pool and is implemented for future external contracts to use to get the user shares at an arbitrary block.",
        "params": {
          "_block": "Block number for which the query is being made for",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Pool shares of the user at the block"
        }
      },
      "userStake(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current staked tokens of the user"
        }
      },
      "withdraw(address,uint256)": {
        "details": "The user should call `getUserLocked()` beforehand to ensure that they have at least `amount` unlocked tokens to withdraw",
        "params": {
          "amount": "Amount to be withdrawn",
          "destination": "Token transfer destination"
        }
      }
    },
    "title": "API3 pool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "EPOCH_LENGTH()": {
        "notice": "Length of the epoch in which the staking reward is paid out once. It is hardcoded as 7 days in seconds."
      },
      "REWARD_VESTING_PERIOD()": {
        "notice": "Number of epochs before the staking rewards get unlocked. Hardcoded as 52 epochs, which corresponds to a year."
      },
      "agentAppPrimary()": {
        "notice": "Address of the primary Agent app of the API3 DAO"
      },
      "agentAppSecondary()": {
        "notice": "Address of the secondary Agent app of the API3 DAO"
      },
      "api3Token()": {
        "notice": "API3 token contract"
      },
      "aprUpdateStep()": {
        "notice": "Steps in which APR will be updated in percentages"
      },
      "balanceOf(address)": {
        "notice": "Called to get the current voting power of a user"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Called to get the voting power of a user at a checkpoint, closest to the provided block"
      },
      "claimsManagerStatus(address)": {
        "notice": "Mapping that keeps the claims manager statuses of addresses"
      },
      "currentApr()": {
        "notice": "APR that will be paid next epoch"
      },
      "delegateVotingPower(address)": {
        "notice": "Called by the user to delegate voting power"
      },
      "deposit(address,uint256,address)": {
        "notice": "Called to deposit tokens for a user by using `transferFrom()`"
      },
      "depositAndStake(address,uint256)": {
        "notice": "Convenience method to deposit and stake in a single transaction"
      },
      "depositWithVesting(address,uint256,address,uint256,uint256)": {
        "notice": "Called by TimelockManager contracts to deposit tokens on behalf of a user on a linear vesting schedule"
      },
      "epochIndexOfLastRewardPayment()": {
        "notice": "Epoch index of the most recent reward payment"
      },
      "epochIndexToReward(uint256)": {
        "notice": "Records of rewards paid in each epoch"
      },
      "genesisEpoch()": {
        "notice": "Epochs are indexed as `block.timestamp / EPOCH_LENGTH`. `genesisEpoch` is the index of the epoch in which the pool is deployed."
      },
      "getReceivedDelegationAt(address,uint256)": {
        "notice": "Called to get the voting power delegated to a user at a checkpoint, closest to specific block"
      },
      "getUser(address)": {
        "notice": "Called to get the details of a user"
      },
      "getUserDelegate(address)": {
        "notice": "Called to get the current delegate of the user"
      },
      "getUserDelegateAt(address,uint256)": {
        "notice": "Called to get the delegate of the user at a checkpoint, closest to specified block"
      },
      "getUserLocked(address)": {
        "notice": "Called to get the current locked tokens of the user"
      },
      "maxApr()": {
        "notice": "Maximum APR (annual percentage rate) the pool will pay as staking rewards in percentages"
      },
      "minApr()": {
        "notice": "Minimum APR (annual percentage rate) the pool will pay as staking rewards in percentages"
      },
      "payOutClaim(address,uint256)": {
        "notice": "Called by a claims manager to pay out an insurance claim"
      },
      "payReward()": {
        "notice": "Called to pay the reward for the current epoch"
      },
      "proposalVotingPowerThreshold()": {
        "notice": "Minimum voting power the users must have to be able to make proposals (in percentages)"
      },
      "scheduleUnstake(uint256)": {
        "notice": "Called by the user to schedule unstaking of their tokens"
      },
      "setAprUpdateStep(uint256)": {
        "notice": "Called by the DAO Agent to set the APR update steps"
      },
      "setClaimsManagerStatus(address,bool)": {
        "notice": "Called by the DAO Agent to set the authorization status of a claims manager contract"
      },
      "setDaoApps(address,address,address,address)": {
        "notice": "Called after deployment to set the addresses of the DAO apps"
      },
      "setMaxApr(uint256)": {
        "notice": "Called by the DAO Agent to set the maximum APR"
      },
      "setMinApr(uint256)": {
        "notice": "Called by the DAO Agent to set the minimum APR"
      },
      "setProposalVotingPowerThreshold(uint256)": {
        "notice": "Called by the DAO Agent to set the voting power threshold for proposals Only the primary Agent can do this because it is a critical operation."
      },
      "setStakeTarget(uint256)": {
        "notice": "Called by the DAO Agent to set the stake target"
      },
      "setUnstakeWaitPeriod(uint256)": {
        "notice": "Called by the DAO Agent to set the unstake waiting period"
      },
      "stake(uint256)": {
        "notice": "Called to stake tokens to receive pools in the share"
      },
      "stakeTarget()": {
        "notice": "Stake target the pool will aim to meet in percentages of the total token supply. The staking rewards increase if the total staked amount is below this, and vice versa."
      },
      "totalStake()": {
        "notice": "Total number of tokens staked at the pool"
      },
      "totalSupply()": {
        "notice": "Called to get the current total voting power"
      },
      "totalSupplyOneBlockAgo()": {
        "notice": "Called to get the total voting power one block ago"
      },
      "undelegateVotingPower()": {
        "notice": "Called by the user to undelegate voting power"
      },
      "unstake(address)": {
        "notice": "Called to execute a pre-scheduled unstake"
      },
      "unstakeAndWithdraw(address)": {
        "notice": "Convenience method to execute an unstake and withdraw in a single transaction"
      },
      "unstakeWaitPeriod()": {
        "notice": "Users need to schedule an unstake and wait for `unstakeWaitPeriod` before being able to unstake. This is to prevent the stakers from frontrunning insurance claims by unstaking to evade them, or repeatedly unstake/stake to work around the proposal spam protection."
      },
      "updateLastVoteSnapshotBlock(uint256)": {
        "notice": "Called by a DAO Api3Voting app to update the last vote snapshot block number"
      },
      "updateMostRecentProposalTimestamp(address)": {
        "notice": "Called by a DAO Api3Voting app at proposal creation-time to update the timestamp of the user's most recent proposal"
      },
      "updateMostRecentVoteTimestamp(address)": {
        "notice": "Called by a DAO Api3Voting app at voting-time to update the timestamp of the user's most recent vote"
      },
      "updateTimelockStatus(address,address)": {
        "notice": "Called to release tokens vested by the timelock"
      },
      "userReceivedDelegation(address)": {
        "notice": "Called to get the current voting power delegated to a user"
      },
      "userShares(address)": {
        "notice": "Called to get the current pool shares of a user"
      },
      "userSharesAt(address,uint256)": {
        "notice": "Called to get the pool shares of a user at a checkpoint, closest to the provided block"
      },
      "userSharesAtWithBinarySearch(address,uint256)": {
        "notice": "Called to get the pool shares of a user at checkpoint, closest to specific block using binary search"
      },
      "userStake(address)": {
        "notice": "Called to get the current staked tokens of the user"
      },
      "userToDepositorToTimelock(address,address)": {
        "notice": "Maps user addresses to TimelockManager contract addresses to timelocks"
      },
      "users(address)": {
        "notice": "User records"
      },
      "votingAppPrimary()": {
        "notice": "Address of the primary Api3Voting app of the API3 DAO"
      },
      "votingAppSecondary()": {
        "notice": "Address of the secondary Api3Voting app of the API3 DAO"
      },
      "withdraw(address,uint256)": {
        "notice": "Called to withdraw tokens"
      }
    },
    "notice": "Users can stake API3 tokens at the pool contract to be granted shares. These shares are exposed to the Aragon-based DAO with a pseudo-MiniMe token interface, giving the user voting power at the DAO. Staking pays out weekly rewards that get unlocked after a year, and staked funds are used to collateralize an insurance product that is outside the scope of this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1809,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "api3Token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IApi3Token)3042"
      },
      {
        "astId": 1812,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "agentAppPrimary",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1815,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "agentAppSecondary",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1818,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "votingAppPrimary",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1821,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "votingAppSecondary",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1826,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "claimsManagerStatus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1835,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "epochIndexToReward",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Reward)1722_storage)"
      },
      {
        "astId": 1838,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "epochIndexOfLastRewardPayment",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1844,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "users",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(User)1753_storage)"
      },
      {
        "astId": 1847,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "totalStake",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1853,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "stakeTarget",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1861,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "minApr",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1867,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "maxApr",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1871,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "aprUpdateStep",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1875,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "unstakeWaitPeriod",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1881,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "proposalVotingPowerThreshold",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1890,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "currentApr",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1892,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "lastVoteSnapshotBlock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1896,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "snapshotBlockToTimestamp",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1899,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "totalSharesCheckpoint1",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(Checkpoint)1710_storage"
      },
      {
        "astId": 1902,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "totalSharesCheckpoint2",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(Checkpoint)1710_storage"
      },
      {
        "astId": 2616,
        "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
        "label": "userToDepositorToTimelock",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Timelock)2608_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AddressCheckpoint)1715_storage)dyn_storage": {
        "base": "t_struct(AddressCheckpoint)1715_storage",
        "encoding": "dynamic_array",
        "label": "struct StateUtils.AddressCheckpoint[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Checkpoint)1710_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)1710_storage",
        "encoding": "dynamic_array",
        "label": "struct StateUtils.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IApi3Token)3042": {
        "encoding": "inplace",
        "label": "contract IApi3Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Timelock)2608_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct TimelockUtils.Timelock))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Timelock)2608_storage)"
      },
      "t_mapping(t_address,t_struct(Timelock)2608_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TimelockUtils.Timelock)",
        "numberOfBytes": "32",
        "value": "t_struct(Timelock)2608_storage"
      },
      "t_mapping(t_address,t_struct(User)1753_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StateUtils.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1753_storage"
      },
      "t_mapping(t_uint256,t_struct(Reward)1722_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StateUtils.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)1722_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressCheckpoint)1715_storage": {
        "encoding": "inplace",
        "label": "struct StateUtils.AddressCheckpoint",
        "members": [
          {
            "astId": 1712,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1714,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint)1710_storage": {
        "encoding": "inplace",
        "label": "struct StateUtils.Checkpoint",
        "members": [
          {
            "astId": 1707,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1709,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Reward)1722_storage": {
        "encoding": "inplace",
        "label": "struct StateUtils.Reward",
        "members": [
          {
            "astId": 1717,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "atBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1719,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1721,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "totalSharesThen",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Timelock)2608_storage": {
        "encoding": "inplace",
        "label": "struct TimelockUtils.Timelock",
        "members": [
          {
            "astId": 2601,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2603,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2605,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "releaseStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2607,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "releaseEnd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(User)1753_storage": {
        "encoding": "inplace",
        "label": "struct StateUtils.User",
        "members": [
          {
            "astId": 1726,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Checkpoint)1710_storage)dyn_storage"
          },
          {
            "astId": 1730,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "delegates",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(AddressCheckpoint)1715_storage)dyn_storage"
          },
          {
            "astId": 1734,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "delegatedTo",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Checkpoint)1710_storage)dyn_storage"
          },
          {
            "astId": 1736,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "unstaked",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1738,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "vesting",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1740,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "unstakeShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1742,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "unstakeAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1744,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "unstakeScheduledFor",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1746,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "mostRecentProposalTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1748,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "mostRecentVoteTimestamp",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1750,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "mostRecentDelegationTimestamp",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1752,
            "contract": "contracts/pool-contracts-symlink/Api3Pool.sol:Api3Pool",
            "label": "mostRecentUndelegationTimestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
